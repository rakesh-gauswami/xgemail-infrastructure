#!/bin/sh
#
# Copyright 2020, Sophos
#
# All rights reserved - Do Not Redistribute
# Script to toggle enable/disable jilter in delivery servers

SERVER_NAME="<%= @instance_name %>"
DELIVERY_JILTER_ENABLED_FILE_PATH = "<%= @delivery_jilter_enabled_file_path %>"

reload_postfix() {
  service postfix reload
}

stop_jilter() {
    service xgemail-jilter-service stop
    echo "waiting for jilter to stop"
    until [[ $(netstat -ntlp | grep ':9876') != *java* ]]; do
        printf '.'
        sleep 1
    done
    echo ""
}

start_jilter() {
    service xgemail-jilter-service start
    echo "waiting for jilter to start"
    until [[ $(netstat -ntlp | grep ':9876') = *java* ]]; do
        printf '.'
        sleep 1
    done
    echo ""
}

force_start_jilter() {
    service xgemail-jilter-service force-restart
    echo "waiting for jilter to start"
    until [[ $(netstat -ntlp | grep ':9876') = *java* ]]; do
        printf '.'
        sleep 1
    done
    echo ""
}


enable_jilter_postfix_conf() {
  declare -a jilter_enable_configs=("smtpd_milters = inet:localhost:9876"
                                    "milter_connect_macros = {client_addr}, {j}"
                                    "milter_end_of_data_macros = {i}")

  for i in "${jilter_enable_configs[@]}"
  do
    postmulti -i postfix-$SERVER_NAME -x postconf "$i"
  done
}

disable_jilter_postfix_conf() {
  declare -a jilter_disable_configs=("smtpd_milters"
                                     "milter_connect_macros"
                                     "milter_end_of_data_macros")

  for i in "${jilter_disable_configs[@]}"
  do
    postmulti -i postfix-$SERVER_NAME -x postconf -X "$i"
  done
}

force_enable() {
  rm -rf $DELIVERY_JILTER_ENABLED_FILE_PATH
  echo "fore restarting jilter.."
  force_start_jilter
  echo "updating postfix config to enable jilter.."
  enable_jilter_postfix_conf
  echo "reloading postfix"
  reload_postfix
  postfix_reload_return_code=$?
  if (( postfix_reload_return_code != 0 )); then
        echo "postfix reload failed! reverting changes..."
        disable_jilter_postfix_conf
        reload_postfix
        echo "revert complete. update aborted!"
        exit 1
    else
      touch $DELIVERY_JILTER_ENABLED_FILE_PATH
      echo "DONE"
      echo "jilter enabled! To disable, re-run script with the 'disable' parameter"
    fi
}

enable() {
  rm -rf $DELIVERY_JILTER_ENABLED_FILE_PATH
  echo "starting jilter.."
  start_jilter
  echo "updating postfix config to enable jilter.."
  enable_jilter_postfix_conf
  echo "reloading postfix"
  reload_postfix
  postfix_reload_return_code=$?
  if (( postfix_reload_return_code != 0 )); then
        echo "postfix reload failed! reverting changes..."
        disable_jilter_postfix_conf
        reload_postfix
        echo "revert complete. update aborted!"
        exit 1
    else
      touch $DELIVERY_JILTER_ENABLED_FILE_PATH
      echo "DONE"
      echo "jilter enabled! To disable, re-run script with the 'disable' parameter"
    fi
}

disable() {
  rm -rf $DELIVERY_JILTER_ENABLED_FILE_PATH
  echo "updating postfix config to disable jilter.."
  disable_jilter_postfix_conf

  echo "reloading postfix"
  reload_postfix
  postfix_reload_return_code=$?

  if (( postfix_reload_return_code != 0 )); then
        echo "postfix reload failed! reverting changes..."
        enable_jilter_postfix_conf
        reload_postfix
        touch $DELIVERY_JILTER_ENABLED_FILE_PATH
        echo "revert complete. update aborted!"
        exit 1
    else
      echo "stopping jilter.."
      stop_jilter
      echo "DONE"
      echo "jilter disabled! To enable, re-run script with the 'enable' parameter"
    fi

}

case "$1" in
    enable)
        $1
        ;;
    disable)
        $1
        ;;
    force_enable)
        $1
        ;;
    *)
        echo $"Usage: $0 {enable|disable|force_enable}"
        exit 2
esac
exit $?
