#!/usr/bin/env python
# vim: autoindent expandtab filetype=python shiftwidth=4 softtabstop=4 tabstop=4
#
# Copyright 2018, Sophos Limited. All rights reserved.
#
# 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of
# Sophos Limited and Sophos Group.  All other product and company
# names mentioned are trademarks or registered trademarks of their
# respective owners.
#
#
#  This script is used to modify which messages are split by recipients.
#  There are two available options:
#    - Enable/disable split-by-recipient globally
#    - Add/remove customers for a per-customer recipient split of messages
#

from logging.handlers import SysLogHandler
from uuid import UUID

import argparse
import json
import logging
import sys
import os

# Constants
POLICY_STORAGE_PATH = "<%= @policy_storage_path %>"
INBOUND_RELAY_CONTROL_PATH = POLICY_STORAGE_PATH + '/config/inbound-relay-control/'
SPLIT_RECIPIENT_CONFIG_FILE = INBOUND_RELAY_CONTROL_PATH + 'msg_producer_split_by_recipients.CONFIG'

logger = logging.getLogger('split-by-recipient')
logger.setLevel(logging.INFO)
syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
formatter = logging.Formatter(
  '[%(name)s] %(process)d %(levelname)s %(message)s'
)
syslog_handler.formatter = formatter
logger.addHandler(syslog_handler)

user_split_parser = argparse.ArgumentParser(description='Used to modify which messages are split by recipients')
user_split_parser.add_argument('--get', action='store_true', help='Get current split-by-recipient configuration')
user_split_parser.add_argument('--enableglobal', action='store_true', help='Enable split-by-recipient feature on a global level')
user_split_parser.add_argument('--disableglobal', action='store_true', help='Disable split-by-recipient feature on a global level (customer level still applies)')
user_split_parser.add_argument('--addcustomer', help='Add a customer id (UUID4 format) for which split-by-recipient feature should be enabled')
user_split_parser.add_argument('--removecustomer', help='Removes a customer id (UUID4 format) so that messages for that customer are no longer split by recipients')

user_split_args = user_split_parser.parse_args()

default_config = {'is_globally_enabled': False, 'customer_ids_enabled': []}

def validate_uuid(uuid_string):
    '''
        Verifies that the provided string is a valid UUID Version 4.
        Returns True if uuid is valid, False otherwise
    '''
    try:
        val = UUID(uuid_string, version=4)
    except ValueError:
        # If it's a value error, then the string
        # is not a valid hex code for a UUID.
        return False
    return True

def get_config():
    '''
        Returns the current split-by-recipient configuration.
        If no CONFIG file currently exists, print out the default config
    '''
    if os.path.isfile(SPLIT_RECIPIENT_CONFIG_FILE):
        with open(SPLIT_RECIPIENT_CONFIG_FILE) as config_file:
            config_data = json.load(config_file)
            print 'split by recipient enabled globally: {0}'.format(config_data['is_globally_enabled'])

            print 'split by recipient enabled for these {0} customer ids:'.format(len(config_data['customer_ids_enabled']))
            for customer_id in config_data['customer_ids_enabled']:
                print '\t{0}'.format(customer_id)
    else:
        print 'Config file does not exist at location {0}'.format(SPLIT_RECIPIENT_CONFIG_FILE)
        print '[DEFAULT_CONFIG]: split by recipient enabled globally: {0}'.format(default_config['is_globally_enabled'])
        print '[DEFAULT_CONFIG]: split by recipient enabled for these customer ids: {0}'.format(default_config['customer_ids_enabled'])

def update_global_config(updated_value, config_location):
    '''
        Updates the global configuration setting depending on the provided value.
    '''
    config = get_current_config(config_location)

    config['is_globally_enabled'] = updated_value

    write_config(config, config_location)

    logger.info('Set is_globally_enabled to {0} in file {1}'.format(updated_value, config_location))
    print 'Set is_globally_enabled to {0} in file {1}'.format(updated_value, config_location)

def add_customer(customer_id, config_location):
    '''
        Adds the provided customer_id to the list of customers for which messages should be split by recipient.
        If the customer_id already exists, this method does nothing.
    '''
    config = get_current_config(config_location)

    if customer_id in config['customer_ids_enabled']:
        print 'Customer with id {0} already exists in file {1}'.format(customer_id, config_location)
        return

    config['customer_ids_enabled'].append(customer_id)

    write_config(config, config_location)

    logger.info('Added customer_id {0} in file {1}'.format(customer_id, config_location))
    print 'Added customer_id {0} in file {1}'.format(customer_id, config_location)

def remove_customer(customer_id, config_location):
    '''
        Removes the provided customer_id from the list of customers for which messages should be split by recipient.
        If the customer_id does not exist, this method does nothing.
    '''
    config = get_current_config(config_location)

    if not customer_id in config['customer_ids_enabled']:
        print 'Customer with id {0} does not exist in file {1}'.format(customer_id, config_location)
        return

    config['customer_ids_enabled'].remove(customer_id)

    write_config(config, config_location)

    logger.info('Added customer_id {0} in file {1}'.format(customer_id, config_location))
    print 'Removed customer_id {0} from file {1}'.format(customer_id, config_location)

def get_current_config(config_location):
    '''
        Reads the current configuration. If the config file does not yet exist,
        then this method returns the default config.
    '''
    config_dir = os.path.dirname(config_location)

    if not os.path.exists(config_dir):
        os.makedirs(config_dir)

    if os.path.isfile(config_location):
        with open(config_location) as config_file:
            return json.load(config_file)
    return default_config

def write_config(config, config_location):
    '''
        Overwrites any existing config file with the updated configuration.
    '''
    temp_file = config_location + '.tmp'

    with open(temp_file, 'w') as config_file:
        json.dump(config, config_file)

    os.rename(temp_file, config_location)

if __name__ == "__main__":
    if user_split_args.get:
        get_config()
    elif user_split_args.enableglobal:
        update_global_config(True, SPLIT_RECIPIENT_CONFIG_FILE)
    elif user_split_args.disableglobal:
        update_global_config(False, SPLIT_RECIPIENT_CONFIG_FILE)
    elif user_split_args.addcustomer:
        if not validate_uuid(user_split_args.addcustomer):
            print 'Invalid UUID {0}'.format(user_split_args.addcustomer)
            sys.exit(1)
        add_customer(user_split_args.addcustomer, SPLIT_RECIPIENT_CONFIG_FILE)
    elif user_split_args.removecustomer:
        if not validate_uuid(user_split_args.removecustomer):
            print 'Invalid UUID {0}'.format(user_split_args.addcustomer)
            sys.exit(1)
        remove_customer(user_split_args.removecustomer, SPLIT_RECIPIENT_CONFIG_FILE)
    else:
        parser.print_help()
