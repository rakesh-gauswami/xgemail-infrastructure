#!/usr/bin/env

import sys
sys.path.append("<%= @xgemail_utils_path %>")
import argparse
import boto3
import json
import os
import sys
import traceback
import configformatter
import formatterutils
import gziputils
from awshandler import AwsHandler

AWS_REGION = "<%= @aws_region %>"
ACCOUNT =  "<%= @account %>"
INSTANCE_ID =  "<%= @instance_id %>"
INSTANCE_LIST_PATH = "<%= @flat_file_instance_list_path %>"
INSTANCE_LIST_FILE_NAME       =  INSTANCE_LIST_PATH + "flat-file-instance-list.CONFIG"

POLICY_BUCKET_NAME = "<%= @policy_bucket %>"
S3_ENCRYPTION_ALGORITHM = 'AES256'
SERVER_NAME="is"
awshandler = AwsHandler(AWS_REGION)
default_config = {'instance_id_enabled' :[]}

def upload_to_s3(fileName,config_object):
  awshandler.upload_data_in_s3_without_expiration(
    POLICY_BUCKET_NAME,
    fileName,
    json.dumps(config_object),
    S3_ENCRYPTION_ALGORITHM
  )

def get_config():
    '''
        Returns the current flat file configuration.
    '''
    if os.path.isfile(INSTANCE_LIST_FILE_NAME):
        with open(INSTANCE_LIST_FILE_NAME) as config_file:
            config_data = json.load(config_file)
            print 'flat file enabled for these {0} instance ids:'.format(len(config_data['instance_id_enabled']))
            for instance_id in config_data['instance_id_enabled']:
                print '\t{0}'.format(instance_id)

def add_instance(instance_id):
    '''
        Adds the instance_id to the list of instances for which we enable flat file.
        If the instance_id already exists, this method does nothing.
    '''
    config = get_current_config(INSTANCE_LIST_FILE_NAME)

    if instance_id in config['instance_id_enabled']:
        print 'Instance id {0} already exists in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)
        return

    config['instance_id_enabled'].append(instance_id)

    write_config(config, INSTANCE_LIST_FILE_NAME)

    print 'Added Instance id {0} in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)

def remove_instance(instance_id):
    '''
        Remove the instance_id from the list of instances for which we disable flat file.
        If the instance_id already exists, this method does nothing.
    '''
    config = get_current_config(INSTANCE_LIST_FILE_NAME)

    if not instance_id in config['instance_id_enabled']:
        print 'Instance id {0} does not exists in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)
        return

    config['instance_id_enabled'].remove(instance_id)

    write_config(config, INSTANCE_LIST_FILE_NAME)

    print 'removed Instance id {0} from file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)

def get_current_config(config_location):
    '''
        Reads the current configuration. If the config file does not yet exist,
        then this method returns the default config.
    '''
    config_dir = os.path.dirname(config_location)

    if not os.path.exists(config_dir):
        os.makedirs(config_dir)

    if os.path.isfile(config_location):
        with open(config_location) as config_file:
            return json.load(config_file)
    return default_config

def write_config(config, config_location):
    '''
        Overwrites any existing config file with the updated configuration.
    '''
    temp_file = config_location + '.tmp'
    with open(temp_file, 'w') as config_file:
        json.dump(config, config_file)
    os.rename(temp_file, config_location)
    upload_to_s3(config_location,config)

def enable_postfix_relay_domains() {
  postmulti -i postfix-$1 -x postconf "relay_domains=hash:\$config_directory/relay_domains"
}

def disable_postfix_relay_domains() {
  postmulti -i postfix-$1 -x postconf "relay_domains=static:ALL"
}

modify_smtpd_recipient_restrictions () {

    if (( $1 == 0 )); then
        postmulti -i postfix-$2 -x postconf -X "smtpd_recipient_restrictions"
        postmulti -i postfix-$2 -x postconf "smtpd_recipient_restrictions = \
        reject_rhsbl_reverse_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rhsbl_sender uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rhsbl_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rbl_client \$reject_rbl_client, check_sender_access hash:\$config_directory/soft_retry_senders_map, reject"
    else
        postmulti -i postfix-$2 -x postconf -X "smtpd_recipient_restrictions"
        postmulti -i postfix-$2 -x postconf "smtpd_recipient_restrictions = \
        reject_rhsbl_reverse_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rhsbl_sender uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rhsbl_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], \
        reject_rbl_client \$reject_rbl_client, \
        check_recipient_access hash:\$config_directory/recipient_access hash:\$config_directory/recipient_access_extra, \
        check_sender_access hash:\$config_directory/soft_retry_senders_map, reject"
    fi

}

reload_postfix() {
    service postfix reload
}

def enable_jilter_config() {

    config = get_current_config(INSTANCE_LIST_FILE_NAME)

    if not INSTANCE_ID in config['instance_id_enabled']:
        print 'Current Instance id {0} is not exists in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)
        return

    echo "enable jilter config to ON..."

    echo "Updating Postfix config to remove recipient access..."
    modify_smtpd_recipient_restrictions 0 $SERVER_NAME

    # echo "Updating Postfix config to remove relay domains..."
    # disable_postfix_relay_domains $SERVER_NAME

    echo "Reloading Postfix..."
    reload_postfix
    postfix_reload_return_code=$?

    if (( postfix_reload_return_code != 0 )); then
        echo "Postfix reload failed! Reverting changes..."
        modify_smtpd_recipient_restrictions 1 $SERVER_NAME
        enable_postfix_relay_domains $SERVER_NAME

        update_transport_route_config "IGNORE"
        echo "Revert complete. Update aborted!"
        exit 1
    else
      echo "DONE"
      echo "Toggle Complete! To revert, re-run script with the 'disable' parameter"
    fi
}

def disable_jilter_config() {

    echo "disable jilter config to ON..."

    echo "Updating Postfix config to add recipient access..."
    modify_smtpd_recipient_restrictions 1 $SERVER_NAME

    # echo "Updating Postfix config to remove relay domains..."
     enable_postfix_relay_domains $SERVER_NAME

    echo "Reloading Postfix..."
    reload_postfix
    postfix_reload_return_code=$?

    if (( postfix_reload_return_code != 0 )); then
        echo "Postfix reload failed! Reverting changes..."
        modify_smtpd_recipient_restrictions 0 $SERVER_NAME
        disable_postfix_relay_domains $SERVER_NAME

       echo "Revert complete. Update aborted!"
        exit 1
    else
      echo "DONE"
      echo "Toggle Complete! To revert, re-run script with the 'disable' parameter"
    fi
}

if __name__ == "__main__":

    flat_file_config_parser = argparse.ArgumentParser(description='ADD/Remove/Enable/Disable  postfix ec2 instances for flat file')
    flat_file_config_parser.add_argument('--get', action='store_true', help='Get current  configuration')
    flat_file_config_parser.add_argument('--enableinstance', action='store_true', help='Enable feature for this instance')
    flat_file_config_parser.add_argument('--disableinstance', action='store_true', help='Disable feature for this instace')
    flat_file_config_parser.add_argument('--addinstance', help='Add a instance id for which feature should be enabled')
    flat_file_config_parser.add_argument('--removeinstance', help='Removes a instance id from enabled list')

    get_config_from_args = flat_file_config_parser.parse_args()
    if get_config_from_args.get:
        get_config()
    elif get_config_from_args.enableinstance:
        enable_jilter_config()
    elif get_config_from_args.disableinstance:
        disable_jilter_config()
    elif get_config_from_args.addinstance:
        add_instance(get_config_from_args.addinstance)
    elif get_config_from_args.removeinstance:
        remove_instance(get_config_from_args.removeinstance)
    else:
        flat_file_config_parser.print_help()