#!/usr/bin/env

import sys
sys.path.append("<%= @xgemail_utils_path %>")
import argparse
import boto3
import botocore
import json
import os
import sys
import traceback
import configformatter
import formatterutils
import gziputils
import logging
import subprocess
from logging.handlers import SysLogHandler
from awshandler import AwsHandler

AWS_REGION = "<%= @aws_region %>"
ACCOUNT =  "<%= @account %>"
CURRENT_INSTANCE_ID    =  "<%= @instance_id %>"
INSTANCE_LIST_PATH = "<%= @flat_file_instance_list_path %>"
INSTANCE_LIST_FILE_NAME       =  INSTANCE_LIST_PATH + "flat-file-instance-list.CONFIG"
POSTFIX_INSTANCE_NAME = '<%= @postfix_instance_name %>'
POLICY_BUCKET_NAME = "<%= @policy_bucket %>"
S3_ENCRYPTION_ALGORITHM = 'AES256'
awshandler = AwsHandler(AWS_REGION)
postfix_instance_name = POSTFIX_INSTANCE_NAME

default_config = {'instance_id_enabled' :[]}
s3 = boto3.client('s3')

# logging to syslog setup
logging.getLogger("botocore").setLevel(logging.WARNING)
logger = logging.getLogger('flat-file-flag')
logger.setLevel(logging.INFO)
handler = logging.handlers.SysLogHandler('/dev/log')
formatter = logging.Formatter(
    '[%(name)s] %(process)d %(levelname)s %(message)s'
)
handler.formatter = formatter
logger.addHandler(handler)

def upload_to_s3(config_object, fileName):
  awshandler.upload_data_in_s3_without_expiration(
    POLICY_BUCKET_NAME,
    fileName,
    json.dumps(config_object),
    S3_ENCRYPTION_ALGORITHM
  )

def flat_file_rollout_config_exist():
    if not POLICY_BUCKET_NAME:
      return False
    try:
      s3.head_object(Bucket=POLICY_BUCKET_NAME,Key=INSTANCE_LIST_FILE_NAME)
      # flat file instance list file found return true
      return True
    except botocore.exceptions.ClientError as e:
      trace = traceback.format_exc()
      logger.debug("flat file rollout instance list file not Exist." + trace)
      return False

def get_config():
    '''
        Returns the current flat file configuration.
    '''
    config_data = get_current_config(INSTANCE_LIST_FILE_NAME)
    print 'flat file enabled for these {0} instance ids:'.format(len(config_data['instance_id_enabled']))
    for instance_id in config_data['instance_id_enabled']:
        print '\t{0}'.format(instance_id)

def add_instance(instance_id):
    '''
        Adds the instance_id to the list of instances for which we enable flat file.
        If the instance_id already exists, this method does nothing.
    '''
    config = get_current_config(INSTANCE_LIST_FILE_NAME)
    if instance_id in config['instance_id_enabled']:
        print 'Instance id {0} already exists in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)
        return

    config['instance_id_enabled'].append(instance_id)
    upload_to_s3(config, INSTANCE_LIST_FILE_NAME)
    print 'Added Instance id {0} in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)

def remove_instance(instance_id):
    '''
        Remove the instance_id from the list of instances for which we disable flat file.
        If the instance_id already exists, this method does nothing.
    '''
    config = get_current_config(INSTANCE_LIST_FILE_NAME)

    if not instance_id in config['instance_id_enabled']:
        print 'Instance id {0} does not exists in file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)
        return

    config['instance_id_enabled'].remove(instance_id)
    upload_to_s3(config, INSTANCE_LIST_FILE_NAME)
    print 'removed Instance id {0} from file {1}'.format(instance_id, INSTANCE_LIST_FILE_NAME)

def get_current_config(config_location):
    '''
        Reads the current configuration. If the config file does not yet exist,
        then this method returns the default config.
    '''
    if flat_file_rollout_config_exist():
        try:
          flat_file_enable = s3.get_object(Bucket=POLICY_BUCKET_NAME,Key= INSTANCE_LIST_FILE_NAME)
          enable_instance_data= flat_file_enable['Body'].read()
          return json.loads(enable_instance_data)
        except Exception as e:
          logger.debug("Error loading flat file Instance list file " + e.message)
    return default_config

def enable_postfix_relay_domains():
    cmd= [
            'postmulti', '-i', postfix_instance_name, '-x',
            'postconf','relay_domains=hash:$config_directory/relay_domains'
        ]
    execute_postfix_cmd(cmd)
    #postmulti -i postfix-$1 -x postconf "relay_domains=hash:\$config_directory/relay_domains"

def disable_postfix_relay_domains():
    cmd= [
        'postmulti', '-i', postfix_instance_name, '-x',
        'postconf','relay_domains=static:ALL'
    ]
    return execute_postfix_cmd(cmd)
    #postmulti -i postfix-$1 -x postconf "relay_domains=static:ALL"

def execute_postfix_cmd(argv):
    pipe = subprocess.Popen(
             argv,
             stdout=subprocess.PIPE,
             stderr=subprocess.PIPE,
             close_fds=True)

    out, err = pipe.communicate()
    return pipe.returncode

def modify_smtpd_recipient_restrictions(flag):

    if ( flag == 0 ):
        cmd = [ 'postmulti', '-i' ,  postfix_instance_name, '-x', 'postconf', '-X', 'smtpd_recipient_restrictions' ]
        execute_postfix_cmd(cmd)
        cmd_add = [ 'postmulti', '-i' ,  postfix_instance_name, '-x', 'postconf', ('smtpd_recipient_restrictions='
         'reject_rhsbl_reverse_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rhsbl_sender uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rhsbl_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rbl_client $reject_rbl_client, check_sender_access hash:$config_directory/soft_retry_senders_map, reject')
         ]
        return execute_postfix_cmd(cmd_add)
    else:
        cmd = [ 'postmulti', '-i' ,  postfix_instance_name, '-x', 'postconf', '-X', 'smtpd_recipient_restrictions' ]
        execute_postfix_cmd(cmd)
        cmd_add = [ 'postmulti', '-i' ,  postfix_instance_name, '-x', 'postconf', ('smtpd_recipient_restrictions='
         'reject_rhsbl_reverse_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rhsbl_sender uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rhsbl_client uri.ire1.sophosxl.com=127.0.1.[1;3;4;5], '
         'reject_rbl_client $reject_rbl_client, '
         'check_recipient_access hash:$config_directory/recipient_access hash:$config_directory/recipient_access_extra, '
         'check_sender_access hash:$config_directory/soft_retry_senders_map, reject')
         ]
        return execute_postfix_cmd(cmd_add)

def reload_postfix():
    cmd= ['service', 'postfix', 'reload']
    return execute_postfix_cmd(cmd)

def enable_jilter_config():
    config = get_current_config(INSTANCE_LIST_FILE_NAME)
    if not CURRENT_INSTANCE_ID in config['instance_id_enabled']:
        logger.warn('Current Instance id {0} is not exists in file {1}'.format(CURRENT_INSTANCE_ID, INSTANCE_LIST_FILE_NAME))
        return

    print "enable jilter config to ON..."
    print "Updating Postfix config to remove recipient access..."
    modify_smtpd_recipient_restrictions(0)

    print "Updating Postfix config to remove relay domains..."
    disable_postfix_relay_domains()

    print "Reloading Postfix..."
    postfix_reload_return_code = reload_postfix()
    if ( postfix_reload_return_code != 0 ):
        print "Postfix reload failed! Reverting changes..."
        modify_smtpd_recipient_restrictions(1)
        enable_postfix_relay_domains()

def disable_jilter_config():
    config = get_current_config(INSTANCE_LIST_FILE_NAME)
    if not CURRENT_INSTANCE_ID in config['instance_id_enabled']:
        logger.warn('Current Instance id {0} is not exists in file {1}'.format(CURRENT_INSTANCE_ID, INSTANCE_LIST_FILE_NAME))
        return

    print "enable postfix config to ON..."
    print "Updating Postfix config to add recipient access..."
    modify_smtpd_recipient_restrictions(1)
    print "Updating Postfix config to add relay domains..."
    enable_postfix_relay_domains()

    print "Reloading Postfix..."
    postfix_reload_return_code = reload_postfix()
    if ( postfix_reload_return_code != 0 ):
        print "Postfix reload failed! Reverting changes..."
        modify_smtpd_recipient_restrictions(0)
        disable_postfix_relay_domains()

if __name__ == "__main__":

    flat_file_config_parser = argparse.ArgumentParser(description='ADD/Remove/Enable/Disable  postfix ec2 instances for flat file')
    flat_file_config_parser.add_argument('--get', action='store_true', help='Get current  configuration')
    flat_file_config_parser.add_argument('--enableinstance', action='store_true', help='Enable feature for this instance')
    flat_file_config_parser.add_argument('--disableinstance', action='store_true', help='Disable feature for this instace')
    flat_file_config_parser.add_argument('--addinstance', help='Add a instance id for which feature should be enabled')
    flat_file_config_parser.add_argument('--removeinstance', help='Removes a instance id from enabled list')

    get_config_from_args = flat_file_config_parser.parse_args()
    if get_config_from_args.get:
        get_config()
    elif get_config_from_args.enableinstance:
        enable_jilter_config()
    elif get_config_from_args.disableinstance:
        disable_jilter_config()
    elif get_config_from_args.addinstance:
        add_instance(get_config_from_args.addinstance)
    elif get_config_from_args.removeinstance:
        remove_instance(get_config_from_args.removeinstance)
    else:
        flat_file_config_parser.print_help()