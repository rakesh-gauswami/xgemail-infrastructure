#!/usr/bin/env

import sys
sys.path.append("<%= @xgemail_utils_path %>")
import argparse
import boto3
import json
import sys
import traceback
from datetime import datetime
from datetime import timedelta
from awshandler import AwsHandler
from botocore.exceptions import ClientError

AWS_REGION = "<%= @aws_region %>"
ACCOUNT =  "<%= @account %>"
CUSTOM_ROUTE_TRASNPORT_PATH = "<%= @custom_route_trasnport_path %>"
CUSTOM_ROUTE_RECIPIENT_FILE_PATH = "#{CUSTOM_ROUTE_TRASNPORT_PATH}/domain/"
CUSTOM_ROUTE_FILE_NAME       = "#{CUSTOM_ROUTE_TRASNPORT_PATH}/customer-delivery-custom-recipient-trasnport.json"

POLICY_BUCKET_NAME = "<%= @policy_bucket %>"
CUSTOM_ROUTE_TTL_IN_DAYS = 365
S3_ENCRYPTION_ALGORITHM = 'AES256'
expires = datetime.now() + timedelta(days=CUSTOM_ROUTE_TTL_IN_DAYS)
awshandler = AwsHandler(AWS_REGION)

def upload_to_s3(fileName,dataStr):
    awshandler.upload_data_in_s3(
        POLICY_BUCKET_NAME,
        fileName,
        dataStr,
        expires,
        S3_ENCRYPTION_ALGORITHM
        )

def argument_parser():
    parser = argparse.ArgumentParser(description='Customer delivery recipient trasnport updater')
    parser.add_argument('command', metavar='command', choices=["LIST", "ADD_UPDATE", "DELETE"],help='Type of action/operation')
    parser.add_argument('--domainOrEmail', metavar='domainOrEmail', help='Domain name or email address ')
    parser.add_argument('--destination', metavar='destination',help="Destination Host/MX where mail delivered")
    parser.add_argument("--destination_type", metavar='destination_type', choices=["MX", "Host"],help='Type of Destination MX/Host')
    parser.add_argument('--port', metavar='port', type = int ,help="port number")
    parser.add_argument('--customer_id', metavar='customer_id',help="Customer id for which custom mail routing config is added.")
    args = parser.parse_args()
    portRange = range(1, 65353)
    if args.command == "DELETE":
        if args.domainOrEmail is None:
            parser.error("domainOrEmail is required attribute with command Delete")
    if args.command == "ADD_UPDATE":
        if args.domainOrEmail is None or args.destination is None or args.destination_type is None or args.port is None or args.customer_id is None:
            parser.error("All parameter are require for ADD/UPDATE record")
        if args.port not in portRange:
            parser.error("Warning: Port should be in range(1-65353) ")
    return args

if __name__ == "__main__":
    bucket_name = POLICY_BUCKET_NAME
    s3 = boto3.resource('s3')
    try:
        current_config = s3.Object(bucket_name, CUSTOM_ROUTE_FILE_NAME)
        current_config_object = json.loads(current_config.get()['Body'].read())
        record = current_config_object
    except ClientError as ex:
        if ex.response['Error']['Code'] == 'NoSuchKey':
            print("Warning: Existing config file not found")
            record = {}
    args = argument_parser()
    command = args.command
    domainOrEmail = args.domainOrEmail
    if command == "ADD_UPDATE":
        if domainOrEmail is not None and domainOrEmail in record.keys():
            newObject = {}
            newObject["delivery_destination"] = {}
            newObject["delivery_destination"]["destination"] = args.destination
            newObject["delivery_destination"]["type"] = args.destination_type
            newObject["delivery_destination"]["port"] = args.port
            newObject["delivery_destination"]["customer_id"] = args.customer_id
            print("Old Record:")
            print(json.dumps(record[domainOrEmail], indent = 4))
            print("New Record:")
            print(json.dumps(newObject, indent = 4))
            query = raw_input("Do you want to Update Record. Enter 'y' to proceed futher ? ")
            if query.lower() == 'y':
                record[domainOrEmail] = newObject
                recordstr = json.dumps(record)
                # Save custom route record in file
                upload_to_s3(CUSTOM_ROUTE_FILE_NAME,recordstr)
                print("Record Updated Successfully")
        else:
            record[domainOrEmail] = {}
            record[domainOrEmail]["delivery_destination"] = {}
            record[domainOrEmail]["delivery_destination"]["destination"] = args.destination
            record[domainOrEmail]["delivery_destination"]["type"] = args.destination_type
            record[domainOrEmail]["delivery_destination"]["port"] = args.port
            record[domainOrEmail]["delivery_destination"]["customer_id"] = args.customer_id
            upload_to_s3(CUSTOM_ROUTE_RECIPIENT_FILE_PATH + domainOrEmail.encode('utf-8').encode("hex"),'')
            print(json.dumps(record[domainOrEmail], indent = 4))
            recordstr = json.dumps(record)
            # Save custom route record in file
            upload_to_s3(CUSTOM_ROUTE_FILE_NAME,recordstr)
            print("Record Added Successfully")
    if command == "LIST":
        print("List of custom transport routes.")
        print(json.dumps(record, indent = 4))
    if command == "DELETE":
        if domainOrEmail is not None and domainOrEmail in record.keys():
            print(json.dumps(record[domainOrEmail], indent = 4))
            query = raw_input("Do you realy want to delete Record. Enter 'y' to proceed futher ? ")
            if query.lower() == 'y':
                del record[domainOrEmail]
                s3_client = boto3.client('s3')
                s3_file_path = CUSTOM_ROUTE_RECIPIENT_FILE_PATH + domainOrEmail.encode('utf-8').encode("hex")
                try:
                    s3_client.head_object(
                        Bucket=bucket_name,
                        Key=s3_file_path
                    )
                    obj = s3.Object(bucket_name,s3_file_path)
                    obj.delete()
                except ClientError as e:
                    trace = traceback.format_exc()
                    print("Exception occurred while deleting recipient file" + trace)
                    sys.exit(1)
                recordstr = json.dumps(record)
                # Save custom route record in file
                upload_to_s3(CUSTOM_ROUTE_FILE_NAME,recordstr)
                print("domainOrEmail {} is deleted".format(domainOrEmail))
        else:
            print("domainOrEmail {} is Not Exist".format(domainOrEmail))
