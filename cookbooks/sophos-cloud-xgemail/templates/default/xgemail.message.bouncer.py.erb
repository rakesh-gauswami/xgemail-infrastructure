#!/usr/bin/env python
# vim: autoindent expandtab filetype=python shiftwidth=4 softtabstop=4 tabstop=4
#
# Consumes bounce messages generated by postfix.
#
# Copyright: Copyright (c) 2018. All rights reserved.
# Company: Sophos Limited or one of its affiliates.

import sys
sys.path.append("<%= @utils_dir %>")
import email
import json
import re
import string
from dateutil import parser
from awshandler import AwsHandler
from common.notificationsubmitinfo import NotificationSubmitInfo
import logging
from logging.handlers import SysLogHandler

AWS_REGION = "<%= @aws_region %>"
EX_TEMPFAIL = <%= @ex_tempfail_code %>
XGEMAIL_NOTIFIER_QUEUE = "<%= @notifier_sqs_url %>"
EMAIL_REGEX = "[#\w\.-]+@[\w\.-]+"
NOTIFICATION_TYPE = "FAILURE_NDR"
NOT_AVAILABLE_STR = "Not Available"

# logging to syslog setup
logging.getLogger("botocore").setLevel(logging.WARNING)
logger = logging.getLogger('messagebouncer')
logger.setLevel(logging.INFO)
handler = logging.handlers.SysLogHandler('/dev/log')
formatter = logging.Formatter(
    '[%(name)s] %(process)d %(levelname)s %(message)s'
)
handler.formatter = formatter
logger.addHandler(handler)

awshandler = AwsHandler(AWS_REGION)

def get_recipients(text, sender):
    recipients = set([])
    results = re.findall(EMAIL_REGEX, text)
    for match in results:
        if match != sender:
            recipients.add(match.encode("utf-8"))
    return(list(recipients))

def format_sender(sender_str):
    if '<' in sender_str:
        sender_str = string.replace(sender_str, '<', '')
    if '>' in sender_str:
        sender_str = string.replace(sender_str, '>', '')
    return sender_str

def add_to_sqs(sqs_url, sqs_json):
    return awshandler.add_to_sqs(
        sqs_url,
        json.dumps(sqs_json)
    )

def submit_notification_info_to_sqs(sender, recipients, subject, hostname, failure_txt, sent_timestamp):
    # Create a notification submit info object and submit it to Notifier listener SQS for processing
    notification_submit_info = NotificationSubmitInfo(
        NOTIFICATION_TYPE,
        sender,
        recipients,
        subject,
        hostname,
        failure_txt,
        sent_timestamp
    )
    sqs_json = notification_submit_info.get_sqs_json()

    logger.info("Added notification submit info SQS job response [{0}] [{1}]]".format
        (add_to_sqs(
            XGEMAIL_NOTIFIER_QUEUE,
            sqs_json
            ),sqs_json
        )
    )

def main():
    try:
        #Define default values
        subject = ''
        failure_reason = NOT_AVAILABLE_STR
        hostname = NOT_AVAILABLE_STR
        original_sender = NOT_AVAILABLE_STR
        recipient = NOT_AVAILABLE_STR

        email_msg = email.message_from_file(sys.stdin)
        sent_date_str = email_msg.get('Date')
        sent_date = parser.parse(sent_date_str)
        sent_date = sent_date.isoformat()
        hostname = email_msg.get('From')
        # Get parts from body of email message and parse them to get specific information
        for part in email_msg.walk():
            # Get information from rfc822-headers part of the email.
            if part.get_content_type() == 'text/rfc822-headers':
                payload = part.get_payload()
                args = payload.split("\n")
                for arg in args:
                    arg = arg.lower()
                    if 'subject:' in arg:
                        subject = arg.split(':', 1)[1].strip()
                    if 'return-path:' in arg:
                        original_sender = format_sender(arg.split(':', 1)[1].strip())
                        original_sender.encode("utf-8")
                        if len(original_sender) == 0 :
                            logger.info(
                                " Skip processing and submitting message to SQS as original sender [{0}] is empty ",
                                original_sender
                            )
                            return

            # Format is -  <recipient> : host <hostname> said: <status code> <failure_reason>
            payload_text = part.get_payload()
            if part.get_content_type() == 'text/plain' and len(payload_text) > 1:
                recipient = get_recipients(payload_text,original_sender)
                failure_reason = part.get_payload().replace('\n', ' ')
                # Remove non-word characters.
                failure_reason.encode()
            logger.debug("Sender = {0}".format(original_sender))
            logger.debug("Recipient = {0}".format(recipient))
            logger.debug("Subject = {0}".format(subject))
            logger.debug("Hostname = {0}".format(hostname))
            logger.debug("Failure Reason = {0}".format(failure_reason))

        submit_notification_info_to_sqs(
            original_sender,
            recipient,
            subject,
            hostname,
            failure_reason,
            sent_date
        )
    except BaseException as e:
        logger.exception("Failed handling bounce message [{0}]".format(e))
        exit(EX_TEMPFAIL)

if __name__ == "__main__":
    main()