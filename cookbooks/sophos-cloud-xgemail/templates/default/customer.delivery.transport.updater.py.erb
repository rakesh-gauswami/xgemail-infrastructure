#!/usr/bin/env python
# vim: autoindent expandtab filetype=python shiftwidth=4 softtabstop=4 tabstop=4
#
# Polls XGEMAIL PIC for a list of customer delivery destinations
# and installs a new transport maps file for postfix
#
# Copyright: Copyright (c) 1997-2016. All rights reserved.
# Company: Sophos Limited or one of its affiliates.

import json
import logging
import os
import requests
import subprocess
import sys

# Constants
PIC_CA_PATH = '<%= @xgemail_pic_ca_path %>'
PIC_FQDN = '<%= @xgemail_pic_fqdn %>'
POSTFIX_INSTANCE_NAME = '<%= @postfix_instance_name %>'
TRANSPORT_FILENAME = '<%= @transport_filename %>'

root = logging.getLogger()
root.setLevel(logging.INFO)
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s %(process)d %(levelname)s %(name)s %(message)s')
ch.setFormatter(formatter)
root.addHandler(ch)

PIC_XGEMAIL_API_URL = 'https://%s/mail/api/xgemail' % (PIC_FQDN)
PIC_DOMAINS_URL = PIC_XGEMAIL_API_URL + '/domains'

logging.info('customer delivery transport cron - pic url [%s]', PIC_XGEMAIL_API_URL)

PIC_DESTINATION_URL = PIC_XGEMAIL_API_URL + '/destination'

response = requests.get(PIC_DOMAINS_URL, verify = PIC_CA_PATH)
response.raise_for_status()

# Expecting JSON in this form
#   {
#     "destination": "10.11.12.13",
#     "type": "IP",
#     "port": 8080
#   }
def parse_domain_response( domain_name, destinations_json ) :
  destination_json = destinations_json['delivery_destination']
  route = destination_json['destination']
  port = destination_json['port']
  type = destination_json['type']

  ret_val = domain_name + ' smtp:'

  if (type != 'MX'):
    ret_val += '['

  ret_val += route

  if (type != 'MX'):
    ret_val += ']'

  if (port != 25):
    ret_val += ":" + str(port)

  return ret_val

POSTFIX_CONFIG_DIR = subprocess.check_output(
    [
      'postmulti', '-i', POSTFIX_INSTANCE_NAME, '-x',
      'postconf','-h','config_directory'
    ]
  ).rstrip()

TRANSPORT_FILE = POSTFIX_CONFIG_DIR + '/' + TRANSPORT_FILENAME
TRANSPORT_FILE_TMP = TRANSPORT_FILE + '.tmp'

with open(TRANSPORT_FILE_TMP, 'w') as f:
  for domain in response.json()['domains'] :
    domain_response = requests.post(
        PIC_DESTINATION_URL,
        headers = {'Content-type': 'application/json'},
        data = json.dumps({'domain':domain}),
        verify = PIC_CA_PATH
      )
    domain_response.raise_for_status()
    transport_line = parse_domain_response(domain, domain_response.json())
    f.write('{0}\n'.format(transport_line))

  # Add catch-all to retry any unknown domain
  f.write('* retry: domain is unknown\n')

subprocess.call(['postmap', 'hash:{0}'.format(TRANSPORT_FILE_TMP)])
os.rename(TRANSPORT_FILE_TMP, TRANSPORT_FILE);
os.rename(TRANSPORT_FILE_TMP + '.db', TRANSPORT_FILE + '.db');

logging.info('transport map file [%s.db] successfully updated', TRANSPORT_FILE)
