#!/usr/bin/env

import sys
sys.path.append("<%= @xgemail_utils_path %>")
import argparse
import boto3
import json
import sys
from botocore.exceptions import ClientError
import deliverydirectorthreshold

AWS_REGION = "<%= @aws_region %>"
ACCOUNT ="<%= @account %>"
DD_CONFIG_FILE_NAME = "<%= @delivery_director_config_filename %>"

DOMAIN_THRESHOLD_DEFAULT = 50
EMAIL_THRESHOLD_DEFAULT = 10
WARMUP_PERCENTAGE_DEFAULT = 0


def print_record(record):
    print"==============================================================================="
    print "Email/domain: %s" % record['Item']["key"]
    print "Risk Count  : %s" % record['Item']["risk_count"]
    print "Delivery Type : %s" % record['Item']["delivery_type"]
    print"==============================================================================="


def print_all(records):
    print"==============================================================================="
    for record in records['Items']:
        print "Email/domain: %s" % record["key"]
        print "Risk Count  : %s" % record["risk_count"]
        delivery_type = record.get("delivery_type")
        is_sub_domain = record.get("is_sub_domain")
        if delivery_type:
            print "Delivery Type : %s" % delivery_type
        if is_sub_domain:
            print "Is SubDomain : %s" % is_sub_domain
        print"==============================================================================="


def update_record(updated_risk_value,
                  type_of_record,
                  domain_or_email,
                  delivery_type,
                  is_sub_domain):

    if is_sub_domain is None:
        table.update_item(
            Key={
                'key': domainOrEmail,
            },
            UpdateExpression='SET risk_count = :val1, addressType = :val2 , delivery_type = :val3',
            ExpressionAttributeValues={
                ':val1': updated_risk_value,
                ':val2': type_of_record,
                ':val3': delivery_type
            }
        )
    else:
        table.update_item(
            Key={
                'key': domainOrEmail,
            },
            UpdateExpression='SET risk_count = :val1, addressType = :val2 , delivery_type = :val3 , is_sub_domain = :val4',
            ExpressionAttributeValues={
                ':val1': updated_risk_value,
                ':val2': type_of_record,
                ':val3': delivery_type,
                ':val4': is_sub_domain
            }
        )

    update_response = table.get_item(
        Key={
            'key': domain_or_email,
        }
    )
    return update_response


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Delivery director config updater')
    parser.add_argument('command', metavar='command choices=[GET, GET_ALL, DELETE, ADD, REDUCE, CONFIG]',
                        choices=["GET", "GET_ALL", "DELETE", "ADD", "REDUCE", "CONFIG"],
                        help='Type of action/operation choices=[GET, GET_ALL, DELETE, ADD, REDUCE]')
    parser.add_argument('--domainOrEmail', type=str, metavar='Domain name or email address',
                        help='Domain name or email address ')
    parser.add_argument('--region', choices=['eu-central-1', 'eu-west-1', 'us-west-2', 'us-east-2'],
                        help='the region in which this script runs', required=True)
    parser.add_argument('--risk_value', type=int, metavar='Risk value to add or reduce. Any value between 1 to 100',
                        choices=xrange(0, 101),
                        help="Risk value to add or reduce. Any value between 1 to 100")
    parser.add_argument("--record_type", type=str, metavar='choices=[domain, email]', choices=["domain", "email"],
                        help='Type of record email/domain. choices=[domain, email]')
    parser.add_argument("--delivery_type", type=str, metavar='delivery_type choices=[RISK, BULK, DOMAIN]',
                        choices=["RISK", "BULK", "DOMAIN"],
                        help='Delivery node type to which mails will be routed through  choices=[RISK, BULK, DOMAIN]')
    parser.add_argument("--isSubDomain", type=bool, metavar='isSubDomain', choices=[True, False],
                        help='Match sub domains as well when true')
    parser.add_argument("--domain_threshold", type=int, metavar='domain_threshold',
                        choices=xrange(0, 101),
                        help='Risk value threshold for domain')
    parser.add_argument("--email_threshold", type=int, metavar='email_threshold',
                        choices=xrange(0, 101),
                        help='Risk value threshold for email')
    parser.add_argument("--warmup_percentage", type=int, metavar='warmup_percentage',
                        choices=xrange(1, 101),
                        help='Traffic in percentage of overall traffic to be routed via warm up delivery')
    parser.add_argument("--account", type=str, metavar="account ['dev','inf','qa','prod']",
                        choices=["dev", "inf", "qa", 'prod'],
                        help="Account in which you want to update config")
    args = parser.parse_args()

    print "AWS Region:" %AWS_REGION
    print "ACCOUNT:" %ACCOUNT
    print "DD_CONFIG_FILE_NAME:" %DD_CONFIG_FILE_NAME

    if (args.command == "GET" or args.command == "DELETE") and (args.domainOrEmail is None):
        parser.error("--domainOrEmail is required attribute for GET/DELETE operation")

    if (args.command == "ADD" or args.command == "REDUCE") and \
            (args.risk_value is None or args.record_type is None or args.domainOrEmail is None
             or args.delivery_type is None):
        parser.error(
            "--domainOrEmail,--risk_value,--record_type,"
            "--delivery_type are required attribute for ADD/REDUCE operation")

    command = args.command

    if command != "GET_ALL":
        domainOrEmail = str(args.domainOrEmail).strip()
        riskValue = args.risk_value
        typeOfRecord = args.record_type
        deliveryType = args.delivery_type
        isSubDomain = args.isSubDomain


    dynamoDb = boto3.resource('dynamodb', args.region)
    table = dynamoDb.Table('tf-delivery-director')

    if command == "CONFIG":
        if args.account is None:
            parser.error(
                "--account is required attribute for CONFIG command"
            )

        if args.domain_threshold is None and args.warmup_percentage is None and \
                args.email_threshold is None:
            parser.error(
                "--domain_threshold, --email_threshold, --warmup_percentage "
                "Please provide one of the required attribute for WARM_CONFIG operation")

        # Read Existing Config file
        dd_current_config_object = dict()
        try:
            bucket_name = 'private-cloud-{}-{}-cloudemail-xgemail-deliverydir'.format(args.account, args.region)
            s3 = boto3.resource('s3')
            dd_current_config = s3.Object(bucket_name, DD_CONFIG_FILE_NAME)
            dd_current_config_object = json.loads(dd_current_config.get()['Body'].read())
        except ClientError as ex:
            if ex.response['Error']['Code'] == 'NoSuchKey':
                print "Warning: Existing config file not found,script will use default for " \
                      "attribute not present in command input"

        if not bool(dd_current_config_object):
            # Setting it with default when existing s3 object not found
            dd_current_config_object = DeliveryDirectorThreshold(DOMAIN_THRESHOLD_DEFAULT,
                                                                 EMAIL_THRESHOLD_DEFAULT,
                                                                 WARMUP_PERCENTAGE_DEFAULT). \
                get_deliverdirector_threshold_json()

        if args.domain_threshold is None:
            domain_threshold = dd_current_config_object['domain_threshold']
        else:
            domain_threshold = args.domain_threshold

        if args.email_threshold is None:
            email_threshold = dd_current_config_object['email_threshold']
        else:
            email_threshold = args.email_threshold

        if args.warmup_percentage is None:
            warmup_percentage = dd_current_config_object['warmup_percentage']
        else:
            warmup_percentage = args.warmup_percentage

        # Create new updated object
        dd_threshold = DeliveryDirectorThreshold(domain_threshold,
                                                 email_threshold,
                                                 warmup_percentage)
        # Writer Update config object to S3 bucket
        bucket = s3.Bucket(bucket_name)
        bucket.put_object(Key=DD_CONFIG_FILE_NAME,
                          Body=json.dumps(dd_threshold.get_deliverdirector_threshold_json()))

        print "Config update with data %s" % dd_threshold.get_deliverdirector_threshold_json()

    if command == "GET_ALL":
        response = table.scan()
        if len(response) == 0:
            print "No record found in this region"
        else:
            print_all(response)

    if command == "GET":
        try:
            response = table.get_item(
                Key={
                    'key': domainOrEmail,
                }
            )
            print_record(response)
        except KeyError:
            print("No record found for given domain/email.")

    if command == "DELETE":
        confirmation = raw_input("Are you sure you want to delete record[Y/N]?")
        if confirmation == 'Y':
            table.delete_item(
                Key={
                    'key': domainOrEmail
                }
            )
            print("Record deleted.")

    if command == "ADD":
        try:
            response = table.get_item(
                Key={
                    'key': domainOrEmail,
                }
            )
            currentRiskValue = int(response['Item']["risk_count"])
            updatedRiskValue = currentRiskValue + int(riskValue)
        except KeyError:
            updatedRiskValue = riskValue
            print("Existing record of given domain/email not found. Adding new record")

        print("Added/Updated Record:")
        print_record(update_record(updatedRiskValue, typeOfRecord, domainOrEmail, deliveryType, isSubDomain))

    if command == "REDUCE":
        try:
            response = table.get_item(
                Key={
                    'key': domainOrEmail,
                }
            )
            currentRiskValue = int(response['Item']["risk_count"])
            updatedRiskValue = currentRiskValue - riskValue
        except KeyError:
            print("Existing record of given domain/email not found. Ignoring this request")
            sys.exit(1)

        if updatedRiskValue < 0:
            updatedRiskValue = 0
        print("Updated Record:")
        print_record(update_record(updatedRiskValue, typeOfRecord, domainOrEmail, deliveryType, isSubDomain))