#!/usr/bin/env

import sys
sys.path.append("<%= @xgemail_utils_path %>")
import argparse
import boto3
import json
import sys
from datetime import datetime
from datetime import timedelta
from awshandler import AwsHandler
from botocore.exceptions import ClientError

AWS_REGION = "<%= @aws_region %>"
ACCOUNT =  "<%= @account %>"
CUSTOM_ROUTE_FILE_NAME = "<%= @customer_delivery_transport_filename %>"
CUSTOM_ROUTE_RECIPIENT_FILE_PATH = "config/inbound-relay-control/custom-routes/domain/"
POLICY_BUCKET_NAME = "<%= @policy_bucket %>"
CUSTOM_ROUTE_TTL_IN_DAYS = 365
S3_ENCRYPTION_ALGORITHM = 'AES256'
expires = datetime.now() + timedelta(days=CUSTOM_ROUTE_TTL_IN_DAYS)
awshandler = AwsHandler(AWS_REGION)

def argument_parser():
    parser = argparse.ArgumentParser(description='Customer delivery recipient trasnport updater')
    parser.add_argument('command', metavar='command', choices=["LIST", "ADD_UPDATE", "DELETE"],help='Type of action/operation')
    parser.add_argument('--domainOrEmail', metavar='domainOrEmail', help='Domain name or email address ')
    parser.add_argument('--destination', metavar='destination',help="Destination Host/MX where mail delivered")
    parser.add_argument("--destination_type", metavar='destination_type', choices=["MX", "Host"],help='Type of Destination MX/Host')
    parser.add_argument('--port', metavar='port', type = int ,help="port number")
    parser.add_argument('--customer', metavar='customer',help="customer id for whom mail directed")
    args = parser.parse_args()
    portRange = range(1024, 65353)
    if args.command == "ADD_UPDATE":
        if args.port not in portRange:
            parser.error("Warning: Port should be in range(1024-65353) ")
    return args

def upload_to_s3(fileName,dataStr):
    awshandler.upload_data_in_s3(
        POLICY_BUCKET_NAME,
        fileName,
        dataStr,
        expires,
        S3_ENCRYPTION_ALGORITHM
        )


if __name__ == "__main__":
    bucket_name = POLICY_BUCKET_NAME
    s3 = boto3.resource('s3')
    try:
        current_config = s3.Object(bucket_name, CUSTOM_ROUTE_FILE_NAME)
        current_config_object = json.loads(current_config.get()['Body'].read())
        record = current_config_object
    except ClientError as ex:
        if ex.response['Error']['Code'] == 'NoSuchKey':
            print("Warning: Existing config file not found")
            record = {}
    args = argument_parser()
    command = args.command
    domainOrEmail = str(args.domainOrEmail).strip()
    if command == "ADD_UPDATE":
        if domainOrEmail is not None and args.destination is not None and args.destination_type is not None and args.port is not None and args.customer is not None:
            if domainOrEmail is not None and domainOrEmail in record.keys():
                newObject = {}
                newObject["delivery_destination"] = {}
                newObject["delivery_destination"]["destanation"] = args.destination
                newObject["delivery_destination"]["destination_type"] = args.destination_type
                newObject["delivery_destination"]["port"] = args.port
                newObject["delivery_destination"]["customer"] = args.customer
                print("Old Record:")
                print(json.dumps(record[domainOrEmail], indent = 4))
                print("New Record:")
                print(json.dumps(newObject, indent = 4))
                query = input("Do you want to Update Record. Enter 'y' to proceed futher ? ")
                if query.lower() == 'y':
                    record[domainOrEmail] = newObject
                    print("Record Updated Successfully")
            else:
                record[domainOrEmail] = {}
                record[domainOrEmail]["delivery_destination"] = {}
                record[domainOrEmail]["delivery_destination"]["destanation"] = args.destination
                record[domainOrEmail]["delivery_destination"]["destination_type"] = args.destination_type
                record[domainOrEmail]["delivery_destination"]["port"] = args.port
                record[domainOrEmail]["delivery_destination"]["customer"] = args.customer
                print("Record Added Successfully")
                print(json.dumps(record[domainOrEmail], indent = 4))
                upload_to_s3(CUSTOM_ROUTE_RECIPIENT_FILE_PATH + domainOrEmail.encode('utf-8').hex(),'')
        else:
            print("All parameter are require for ADD/UPDATE record")
    if command == "LIST":
        print("List Of Records:")
        print(json.dumps(record, indent = 4))
    if command == "DELETE":
        if domainOrEmail is not None and domainOrEmail in record.keys():
            print(json.dumps(record[domainOrEmail], indent = 4))
            query = input("Do you realy want to delete Record. Enter 'y' to proceed futher ? ")
            if query.lower() == 'y':
                del record[domainOrEmail]
                new_s3_file_path = CUSTOM_ROUTE_RECIPIENT_FILE_PATH + domainOrEmail.encode('utf-8').hex()
                does_exist_in_s3 = awshandler.key_exists(
                    bucket_name,
                    new_s3_file_path,
                    CUSTOM_ROUTE_RECIPIENT_FILE_PATH
                    )
                if does_exist_in_s3:
                    obj = s3.Object(bucket_name,new_s3_file_path)
                    obj.delete()
                print("domainOrEmail {} is deleted".format(domainOrEmail))
        else:
            print("domainOrEmail {} is Not Exist".format(domainOrEmail))
    recordstr = json.dumps(record)
    upload_to_s3(CUSTOM_ROUTE_FILE_NAME,recordstr)
