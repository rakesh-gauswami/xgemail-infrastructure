#!/usr/bin/env python
# vim: autoindent expandtab filetype=python shiftwidth=4 softtabstop=4 tabstop=4
#
# Copyright 2016, Sophos Limited. All rights reserved.
#
# 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of
# Sophos Limited and Sophos Group.  All other product and company
# names mentioned are trademarks or registered trademarks of their
# respective owners.
#
# This script is responsible for formatting bulk sender object that we store in S3 as
# described here: https://wiki.sophos.net/display/SophosCloud/S3+Objects+File+Format

import formatterutils

SCHEMA_VERSION = 20200108
BLKSNDR_MAGIC_NUMBER = b'\0SOPHBSNDR'
BLKSNDR_FILE_EXTENSION = ".BULKSNDR"

# Nonce length is 0 because we are not encrypting data in V1
NONCE_LENGTH = 0

def get_s3_bulk_sender_path(s3_path):
    return formatterutils.get_s3_file_path(
        s3_path,
        BLKSNDR_FILE_EXTENSION
    )

# Read and verify magic number
def is_bulksender_file(formatted_s3_bulksender_bytes):
    return formatterutils.is_correct_file_format(
        formatted_s3_bulksender_bytes,
        BLKSNDR_MAGIC_NUMBER
    )


# Binary file format with Big Endian (Network) byte order except encryption
# Magic Bytes:  { '\0', 'S', 'O', 'P', 'H', 'B', 'S', 'N', 'D', 'R' }
# Version: 64-bit long based on date
# Nonce (IV) Length: 0
# Nonce (IV): randomly generated bytes to use with AES encryption
# Blob:	bulksender data
def get_formatted_bulk_senders(bulk_sender_json):
    return formatterutils.get_formatted_object(
        BLKSNDR_MAGIC_NUMBER,
        SCHEMA_VERSION,
        NONCE_LENGTH,
        bulk_sender_json
    )


# Accepts formatted bulk sender stream downloaded from S3 which has bulk sender data
# verifies if it is a right type file by magic number and if yes then
# returns bulk sender json
def get_bulk_sender_binary(formatted_s3_bulk_sender_data):
    # verify if it is a bulk sender file first
    if not is_bulksender_file(formatted_s3_bulk_sender_data[0:10]):
        raise ValueError("Bulk sender file format error: invalid bulk sender magic bytes!")

    if not formatterutils.is_correct_version(SCHEMA_VERSION, formatted_s3_bulk_sender_data[10:18]):
        raise ValueError("Bulk sender file format error: invalid bulk sender version bytes!")

    if not formatterutils.is_unencypted_data(formatted_s3_bulk_sender_data[18:22]):
        raise ValueError("Bulk sender file format error: invalid bulk sender nonce length bytes!")

    return formatterutils.get_decompressed_object_bytes(
        formatted_s3_bulk_sender_data[22:len(formatted_s3_bulk_sender_data)]
    )
