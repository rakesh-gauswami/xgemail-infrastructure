#!/usr/bin/env python
# vim: autoindent expandtab filetype=python shiftwidth=4 softtabstop=4 tabstop=4
#
# Copyright 2016, Sophos Limited. All rights reserved.
#
# 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of
# Sophos Limited and Sophos Group.  All other product and company
# names mentioned are trademarks or registered trademarks of their
# respective owners.
#
# This script is responsible for formatting a message as
# described here: https://wiki.sophos.net/display/SophosCloud/S3+Objects+File+Format

import formatterutils

SCHEMA_VERSION = 20170224
MSG_MAGIC_NUMBER = b'\0SOPHMSG'
MESSAGE_FILE_EXTENSION = ".MESSAGE"
# Nonce length is 0 because we are not encrypting data in V1
NONCE_LENGTH = 0

# This could be Message or Metadata
def get_s3_message_path(s3_path):
    return formatterutils.get_s3_file_path(
        s3_path,
        MESSAGE_FILE_EXTENSION
    )

# Binary file format with Big Endian (Network) byte order except encryption
# Magic Bytes: { '\0', 'S', 'O', 'P', 'H', 'M', 'S', 'G' }
# Version: 64-bit long based on date
# Nonce (IV) Length: 0
# Nonce (IV): randomly generated bytes to use with AES encryption (TODO)
# Blob:	gzipped, mime message bytes. (TODO: add enctyption after V1)
def get_formatted_email_data(gzip_msg):
    return formatterutils.get_formatted_object(
        MSG_MAGIC_NUMBER,
        SCHEMA_VERSION,
        NONCE_LENGTH,
        gzip_msg
    )

# Read and verify message magic number
def is_message_file(formatted_s3_msg_bytes):
    return formatterutils.is_correct_file_format(
        formatted_s3_msg_bytes,
        MSG_MAGIC_NUMBER
    )

# Accepts formatted email stream downloaded from S3 which has zipped email
# verifies if it is a right type file by magic number and if yes then
# returns unzipped email binary
def get_message_binary(formatted_s3_message):
    # verify if it is a message file first
    if not is_message_file(formatted_s3_message[0:8]):
        raise ValueError("Message file format error: invalid message magic bytes!")

    if not formatterutils.is_correct_version(SCHEMA_VERSION, formatted_s3_message[8:16]):
        raise ValueError("Message file format error: invalid message version bytes!")

    if not formatterutils.is_unencypted_data(formatted_s3_message[16:20]):
        raise ValueError("Message file format error: invalid message nonce length bytes!")

    # total length of the magic_bytes (8) + version (8) + nonce (4) = 20
    return formatterutils.get_decompressed_object_bytes(
        formatted_s3_message[20:len(formatted_s3_message)]
    )
