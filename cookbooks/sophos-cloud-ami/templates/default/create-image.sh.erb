#!/bin/bash
# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab filetype=sh

# create-image.sh: create new AMI images based on this instance.

set -o xtrace   # Print commands and their arguments as they are executed.
set -o errexit  # Exit immediately if a command exits with a non-zero status.
set -o nounset  # Treat unset variables as an error when substituting.
set -o pipefail # Pipeline status comes from last error, not last command.

# Read parameters from /var/sophos/cookbooks/attributes.json.

AMI_BUCKET='<%= node["ami"]["ami_bucket"] %>'
AMI_DESTINATION_REGIONS='<%= node["ami"]["ami_destination_regions"] %>'
AMI_LAUNCH_PERMISSIONS='<%= node["ami"]["ami_launch_permissions"] %>'
APP_NAME='<%= node["ami"]["application_name"] %>'
BRANCH='<%= node["ami"]["branch"] %>'
BUILD='<%= node["ami"]["build"] %>'
ENVIRONMENT='<%= node["ami"]["environment"] %>'
REGION='<%= node["ami"]["region"] %>'

# Store combined set of AMI ids locally, to be uploaded to S3 when we're done.

AMI_SUMMARY_PATH=/tmp/imageIds
cat <<EOF >"${AMI_SUMMARY_PATH}"
Application: ${APP_NAME}
BuildNumber: ${BUILD}
EOF

# Store one region's AMI id and build number in S3.
# This function stores them in per-region S3 files, and records the data
# in a local file for copying to a combined file once each region is done.
store_ami_id() {
    local region="$1"
    local ami_id_path="$2"

    aws s3 cp --region us-west-2 \
        "${ami_id_path}" \
        "s3://${AMI_BUCKET}/${BRANCH}/${APP_NAME}_imageId_${region}.conf"

    ami_id="$(cat "${ami_id_path}")"

    cat <<EOF >>"${AMI_SUMMARY_PATH}"
AmiId.${region}: ${ami_id}
EOF

    cat <<EOF >/var/Image
AmiId=${ami_id}
BundleVersion=${BUILD}
EOF

    aws s3 cp --region us-west-2 \
        /var/Image \
        "s3://${AMI_BUCKET}/${BRANCH}/${region}/${APP_NAME}/image_latest.conf"

    aws s3 cp --region us-west-2 \
        /var/Image \
        "s3://${AMI_BUCKET}/${BRANCH}/${region}/${APP_NAME}/image_${BUILD}.conf"
}

# Create a new image based on the this instance right here.

DESCRIPTION="Sophos, Inc. Prepared image of ${BRANCH}-${APP_NAME}-${BUILD}."
INSTANCE_ID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
TIMESTAMP=$(date +%s)
INSTANCE_NAME="${ENVIRONMENT}-${BRANCH}-${APP_NAME}-${BUILD}-${TIMESTAMP}"

sync

aws ec2 create-image \
    --region ${REGION}\
    --description "$DESCRIPTION" \
    --instance-id "$INSTANCE_ID" \
    --name "$INSTANCE_NAME" \
    --no-reboot \
    --output text > /var/ImageID

# Wait for image to become available in us-west-2.

image_id=$(cat /var/ImageID)

sleep 120
while true; do
    sleep 15
    image_state=$(aws --region ${REGION} ec2 describe-images --image-id "$image_id" |\
        egrep -o '"State": "(.*)"' |\
        egrep -o ': "(.*)"' |\
        egrep -o '"(.*)"' |\
        egrep -o '[^"]*')
    if [ "$image_state" = available ]; then
        echo 'Image is available'
        break
    fi
done

# Add launch permissions to image.

for id in ${AMI_LAUNCH_PERMISSIONS}; do
    aws ec2 modify-image-attribute \
        --region us-west-2 \
        --image-id "$image_id" \
        --launch-permission "{\"Add\": [{\"UserId\": \"${id}\"}]}"
done

# Copy new image and build number (bundle version) to S3.

store_ami_id "${REGION}" /var/ImageID

declare -A status_arr

# Copy images to other regions.

for destination in ${AMI_DESTINATION_REGIONS}; do
    mkdir "/var/${destination}/"

    aws ec2 copy-image \
        --region "$destination" \
        --source-region ${REGION} \
        --source-image-id "$image_id" \
        --name "$INSTANCE_NAME" \
        --output text > "/var/${destination}/ImageID"

    key=${destination//-/_}
    status_arr[$key]=false
done

# Wait for image to become available in other regions.

all_ready_status=false

while [ "${all_ready_status}" = false ]; do
    new_status=true

    for destination in ${AMI_DESTINATION_REGIONS}; do
        image_id=$(cat "/var/${destination}/ImageID")

        key=${destination//-/_}
        if [ "${status_arr[$key]}" = false ]; then
            image_state=$(aws ec2 describe-images \
                --region "${destination}" \
                --image-id "$image_id" |\
                egrep -o '"State": "(.*)"' |\
                egrep -o ': "(.*)"' |\
                egrep -o '"(.*)"' |\
                egrep -o '[^"]*')

            if [ "$image_state" = available ];then
                # Add launch permissions to image.

                for id in ${AMI_LAUNCH_PERMISSIONS}; do
                    aws ec2 modify-image-attribute \
                        --region "$destination" \
                        --image-id "$image_id" \
                        --launch-permission "{\"Add\": [{\"UserId\": \"${id}\"}]}"
                done

                status_arr[$key]=true
            else
                new_status=false
            fi

            store_ami_id "${destination}" "/var/${destination}/ImageID"
        fi
    done

    all_ready_status=$new_status
    sleep 60
done

# Copy combined results to S3.

aws s3 cp --region us-west-2 \
    "${AMI_SUMMARY_PATH}" \
    "s3://${AMI_BUCKET}/${BRANCH}/build-${BUILD}/create-${APP_NAME}-ami-b${BUILD}-ids.txt"
