{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates/Updates/Deletes a lambda outbound function stored in S3 and creates lambda environment variables.",
  "Metadata": {
    "Copyright": [
      "Copyright 2019, Sophos Limited. All rights reserved.",
      "",
      "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
      "Sophos Limited and Sophos Group.  All other product and company",
      "names mentioned are trademarks or registered trademarks of their",
      "respective owners."
    ],
    "Comments": [
      "NOTE: The template requires a valid IAM role arn that allows",
      "the lambda code to access AWS resources."
    ]
  },
  "Parameters": {
    "FunctionDescription": {
      "Description": "Description for this function.",
      "Type": "String",
      "Default": ""
    },
    "FunctionName": {
      "Description": "The name for this function.  Defaults to a unique physical ID.",
      "Type": "String",
      "Default": ""
    },
    "HandlerName": {
      "Description": "The name of the handler declared in source code.",
      "Type": "String"
    },
    "EuCentral1HostedZoneName" : {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Default" : "hydra.sophos.com."
    },
    "EuWest1HostedZoneName" : {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Default" : "hydra.sophos.com."
    },
    "UsEast2HostedZoneName" : {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Default" : "hydra.sophos.com."
    },
    "UsWest2HostedZoneName" : {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Default" : "hydra.sophos.com."
    },
    "UsWest2RecipientHostedZoneName" : {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a valid DNS zone name.",
      "Default" : "hydra.sophos.com."
    },
    "EuCentral1SenderAddress": {
      "Description": "EU central 1 sender mailbox account",
      "Type": "String"
    },
    "EuWest1SenderAddress": {
      "Description": "EU west 1 sender mailbox account",
      "Type": "String"
    },
    "UsEast2SenderAddress": {
      "Description": "US east 2 sender mailbox account",
      "Type": "String"
    },
    "UsWest2RecipientAddress": {
      "Description": "US west 2 recipient mailbox account",
      "Type": "String"
    },
    "UsWest2SenderAddress": {
      "Description": "US west 2 sender mailbox account",
      "Type": "String"
    },
    "IAMRoleArn": {
      "Description": "The IAM role that Lambda assumes when it runs your code to access AWS services.",
      "Type": "String"
    },
    "MemorySize": {
      "Description": "The amount of memory to allocate for this lambda function (128-1536)",
      "Type": "Number",
      "Default": "256"
    },
    "Runtime": {
      "Description": "The scripting runtime the code runs on.",
      "Type": "String",
      "Default": "nodejs8.10"
    },
    "S3Bucket": {
      "Description": "The S3 bucket where the code has been placed.",
      "Type": "String"
    },
    "S3Key": {
      "Description": "The object key name in S3 (no slash in the beginning).",
      "Type": "String"
    },
    "S3BucketforCerts": {
      "Description": "The S3 bucket where self signed certificates has been placed.",
      "Type": "String"
    },
    "ScheduleExpression": {
      "Description": "The schedule or rate (frequency) that determines when to execute. E.g. 'cron(0 6 * * ? *)' or 'rate(10 minutes)'",
      "Type": "String",
      "Default": ""
    },
    "ScheduleState": {
      "Description": "The state of the scheduled event. ENABLED or DISABLED",
      "Type": "String",
      "Default": "ENABLED",
      "AllowedValues": [
        "ENABLED",
        "DISABLED"
      ]
    },
    "Timeout": {
      "Description": "Timeout in seconds.",
      "Type": "Number",
      "Default": "300",
      "MinValue": "30",
      "MaxValue": "300"
    },
    "TenantId": {
      "Description": "Office365 Global unique identifier",
      "Type": "String"
    },
    "UsWest2PrivKeyPath": {
      "Description": "Private Key path for the domain sophos-email-monitor.com",
      "Type": "String"
    },
    "EuWest1PrivKeyPath": {
      "Description": "Private Key path for the domain sophos-email-monitor.org",
      "Type": "String"
    },
    "UsEast2PrivKeyPath": {
      "Description": "Private Key path for the domain sophos-email-monitor.us",
      "Type": "String"
    },
    "EuCentral1PrivKeyPath": {
      "Description": "Private Key path for the domain sophos-email-monitor.net",
      "Type": "String"
    },
    "UsWest2PubKeyThumbprintPath": {
      "Description": "Public Key thumbprint path for the domain sophos-email-monitor.com",
      "Type": "String"
    },
    "Euwest1PubKeyThumbprintPath": {
      "Description": "Public Key thumbprint path for the domain sophos-email-monitor.org",
      "Type": "String"
    },
    "UsEast2PubKeyThumbprintPath": {
      "Description": "Public Key thumbprint path for the domain sophos-email-monitor.us",
      "Type": "String"
    },
    "EuCentral1PubKeyThumbprintPath": {
      "Description": "Public Key thumbprint path for the domain sophos-email-monitor.net",
      "Type": "String"
    },
    "UsWest2PubKeyPath": {
      "Description": "Public Key path for the domain sophos-email-monitor.com",
      "Type": "String"
    },
    "Euwest1PubKeyPath": {
      "Description": "Public Key path for the domain sophos-email-monitor.org",
      "Type": "String"
    },
    "UsEast2PubKeyPath": {
      "Description": "Public Key path for the domain sophos-email-monitor.us",
      "Type": "String"
    },
    "EuCentral1PubKeyPath": {
      "Description": "Public Key path for the domain sophos-email-monitor.net",
      "Type": "String"
    },
    "UsWest2Id": {
      "Description": "Office365 application id for sophos-email-monitor",
      "Type": "String"
    },
    "Euwest1Id": {
      "Description": "Office365 application id for sophos-email-monitor",
      "Type": "String"
    },
    "EuCentral1Id": {
      "Description": "Office365 application id for sophos-email-monitor",
      "Type": "String"
    },
    "UsEast2Id": {
      "Description": "Office365 application id for sophos-email-monitor",
      "Type": "String"
    }
  },
  "Conditions": {
    "HasFunctionName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "FunctionName"
            },
            ""
          ]
        }
      ]
    },
    "HasSchedule": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ScheduleExpression"
            },
            ""
          ]
        }
      ]
    }
  },

  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": { "Ref": "S3Key" }
        },
        "Description": { "Ref": "FunctionDescription" },
        "Environment":  {
              "Variables": {
                "XGEMAIL_EU_CENTRAL_1_CLIENT_ID": { "Ref": "EuCentral1Id" },
                "XGEMAIL_EU_WEST_1_CLIENT_ID": { "Ref": "Euwest1Id" },
                "XGEMAIL_US_EAST_2_CLIENT_ID": { "Ref": "UsEast2Id" },
                "XGEMAIL_US_WEST_2_CLIENT_ID": { "Ref": "UsWest2Id" },
                "XGEMAIL_EU_CENTRAL_1_PRIVATE_KEY_LOCATION": { "Ref": "EuCentral1PrivKeyPath" },
                "XGEMAIL_EU_WEST_1_PRIVATE_KEY_LOCATION": { "Ref": "EuWest1PrivKeyPath" },
                "XGEMAIL_US_EAST_2_PRIVATE_KEY_LOCATION": { "Ref": "UsEast2PrivKeyPath" },
                "XGEMAIL_US_WEST_2_PRIVATE_KEY_LOCATION": { "Ref": "UsWest2PrivKeyPath" },
                "XGEMAIL_EU_CENTRAL_1_PUBLIC_KEY_THUMBPRINT_LOCATION": { "Ref": "EuCentral1PubKeyThumbprintPath" },
                "XGEMAIL_EU_WEST_1_PUBLIC_KEY_THUMBPRINT_LOCATION": { "Ref": "Euwest1PubKeyThumbprintPath" },
                "XGEMAIL_US_EAST_2_PUBLIC_KEY_THUMBPRINT_LOCATION": { "Ref": "UsEast2PubKeyThumbprintPath" },
                "XGEMAIL_US_WEST_2_PUBLIC_KEY_THUMBPRINT_LOCATION": { "Ref": "UsWest2PubKeyThumbprintPath" },
                "XGEMAIL_EU_CENTRAL_1_PUBLIC_KEY_LOCATION": { "Ref": "EuCentral1PubKeyPath" },
                "XGEMAIL_EU_WEST_1_PUBLIC_KEY_LOCATION": { "Ref": "Euwest1PubKeyPath" },
                "XGEMAIL_US_EAST_2_PUBLIC_KEY_LOCATION": { "Ref": "UsEast2PubKeyPath" },
                "XGEMAIL_US_WEST_2_PUBLIC_KEY_LOCATION": { "Ref": "UsWest2PubKeyPath" },
                "XGEMAIL_TENANT_ID": { "Ref": "TenantId" },
                "XGEMAIL_ROUNDTRIP_KEYS_BUCKET_NAME": { "Ref": "S3BucketforCerts" },
                "XGEMAIL_EU_CENTRAL_1_HOSTED_ZONE_NAME": { "Ref": "EuCentral1HostedZoneName"},
                "XGEMAIL_EU_WEST_1_HOSTED_ZONE_NAME": { "Ref": "EuWest1HostedZoneName"},
                "XGEMAIL_US_EAST_2_HOSTED_ZONE_NAME": { "Ref": "UsEast2HostedZoneName"},
                "XGEMAIL_US_WEST_2_HOSTED_ZONE_NAME": { "Ref": "UsWest2HostedZoneName"},
                "XGEMAIL_EU_CENTRAL_1_SENDER_ADDRESS": { "Ref": "EuCentral1SenderAddress"},
                "XGEMAIL_EU_WEST_1_SENDER_ADDRESS": { "Ref": "EuWest1SenderAddress"},
                "XGEMAIL_US_EAST_2_SENDER_ADDRESS": { "Ref": "UsEast2SenderAddress"},
                "XGEMAIL_US_WEST_2_RECIPIENT_ADDRESS": { "Ref": "UsWest2RecipientAddress"},
                "XGEMAIL_US_WEST_2_SENDER_ADDRESS": { "Ref": "UsWest2SenderAddress"},
                "XGEMAIL_US_WEST_2_RECIPIENT_HOSTED_ZONE_NAME": { "Ref": "UsWest2RecipientHostedZoneName"}
              }
          },
        "FunctionName": {
          "Fn::If": [
            "HasFunctionName",
            {
              "Ref": "FunctionName"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Handler": {
          "Ref": "HandlerName"
        },
        "Role": {
          "Ref": "IAMRoleArn"
        },
        "Runtime": {
          "Ref": "Runtime"
        },
        "Timeout": {
          "Ref": "Timeout"
        },
        "MemorySize": {
          "Ref": "MemorySize"
        }
      }
    },
    "LambdaFunctionVersion": {
      "Type": "AWS::Lambda::Version",
      "DependsOn": "LambdaFunction",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Sophos Central code: ",
              {
                "Ref": "HandlerName"
              }
            ]
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Condition": "HasSchedule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": {
          "Ref": "ScheduleExpression"
        },
        "State": {
          "Ref": "ScheduleState"
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": {
              "Ref": "LambdaFunction"
            }
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "HasSchedule",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledRule",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "LambdaFunctionArn": {
      "Description": "ARN of the function created.",
      "Value": {
        "Fn::GetAtt": [
          "LambdaFunction",
          "Arn"
        ]
      }
    }
  }
}