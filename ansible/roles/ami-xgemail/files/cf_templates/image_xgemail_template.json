{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "The template implements phase I of the new blue/green deployment workflow that creates an image of a XGEMAIL server instance (mail).",

  "Metadata": {
    "Copyright": [
      "Copyright 2016, Sophos Limited. All rights reserved.",
      "",
      "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
      "Sophos Limited and Sophos Group.  All other product and company",
      "names mentioned are trademarks or registered trademarks of their",
      "respective owners."
    ],

    "Comments": [
      { "Ref": "Description" },
      ""
    ]
  },

  "Parameters": {
    "AesDecryptionKey": {
      "Description": "Decryption Key for encrypted buckets",
      "Type": "String",
      "Default": ""
    },

    "AmiBucket": {
      "Description": "Name of S3 bucket where AMI ids will be stored.",
      "Type": "String",
      "Default": "sophos-cloud-amis"
    },

    "AmiBuildTimeoutMinutes": {
      "Description": "Number of minutes allocated to create and copy AMIs.",
      "Type": "String",
      "AllowedPattern": "^[1-9][0-9]*$"
    },

    "ApplicationName": {
      "Description": "Default to java for all bundled WARs",
      "Type": "String",
      "Default": "xgemail"
    },

    "BlockDeviceMappingsXvdf": {
      "Description": "Block device mapping for /data",
      "Type": "String",
      "Default": "40"
    },

    "BlockDeviceMappingsXvdg": {
      "Description": "Block device mapping for /var",
      "Type": "String",
      "Default": "50"
    },

    "BlockDeviceMappingsXvdh": {
      "Description": "Block device mapping for /tmp",
      "Type": "String",
      "Default": "20"
    },

    "Branch": {
      "Description": "(Develop, CPLAT-XXXX, etc...)",
      "Type": "String"
    },

    "Build": {
      "Description": "(v1, v2, etc...)",
      "Type": "String",
      "Default": "v1"
    },

    "Environment": {
      "Description": "(dev2, dev3, dev4, dev5, qa, etc...)",
      "Type": "String",
      "Default": "hmr-core"
    },

    "IamProfile": {
      "Description": "The IAM role to be used.",
      "Type": "String",
      "Default": "sophos-cloud-image-setup"
    },

    "ImageId": {
      "Description": "AMI ID for the source image to build on.",
      "Type": "String"
    },

    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c5.large",
        "c5.xlarge"
      ]
    },

    "JavaBranch": {
      "Description": "(Develop, CPLAT-XXXX, etc...)",
      "Type": "String",
      "Default": "develop"
    },

    "JdkVersion": {
     "Description": "Version of the Oracle JDK for installation.",
     "Type": "String",
     "Default": "jdk-1.8.0_101-b13"
   },

    "JilterInboundVersion": {
      "Description": "Inbound Jilter version",
      "Type": "String"
    },

    "JilterOutboundVersion": {
      "Description": "Outbound Jilter version",
      "Type": "String"
    },

    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair for RDP access",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ami-builder-key"
    },

    "S3CookbookRepositoryUrl": {
      "Description": "The absolute S3 path to the cookbooks tar/zip used to install the application.",
      "Type": "String"
    },

    "S3Sophos3rdPartyRepositoryUrl": {
      "Description": "The S3 bucket path where to find 3rd party packages. (//<bucket>)",
      "Type": "String",
      "Default": "//cloud-applications-3rdparty"
    },

    "S3SophosAppRepositoryUrl": {
      "Description": "The S3 bucket path where to find application packages. (//<bucket>)",
      "Type": "String",
      "Default": "//cloud-applications"
    },

    "VpcSecurityGroup": {
      "Description": "The security group that allows communication within the VPC.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },

    "VpcSubnetId": {
      "Description": "The ID of the subnet the instance to associate to.",
      "Type": "AWS::EC2::Subnet::Id"
    }
  },

  "Resources": {
    "XgemailServerInstance": {
      "Type": "AWS::EC2::Instance",

      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::Join": [
              "", [
                "PT",
                { "Ref": "AmiBuildTimeoutMinutes" },
                "M"
              ]
            ]
          }
        }
      },

      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "svcapi_install": [
              "install_volumes",
              "install_cfn",
              "reset_chef",
              "reset_cookbooks",
              "create_image"
            ]
          },

          "install_volumes": {
            "files": {
              "/mnt/add_volumes.sh": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "#!/bin/bash\n",
                      "# Install the additional volumes\n",
                      "echo '/dev/xvdf  /data           ext4    defaults      0   0' >> /etc/fstab\n",
                      "echo '/dev/xvdg  /var            ext4    defaults      0   0' >> /etc/fstab\n",
                      "echo '/dev/xvdh  /tmp            ext4    defaults,noexec,nosuid      0   0' >> /etc/fstab\n",
                      "echo 'updated /etc/fstab'\n",
                      "mkfs -t ext4 /dev/xvdf\n",
                      "mkfs -t ext4 /dev/xvdg\n",
                      "mkfs -t ext4 /dev/xvdh\n",
                      "echo 'created file systems'\n",
                      "mkdir /data\n",
                      "echo 'created /data directory'\n",
                      "mount /dev/xvdg /mnt\n",
                      "cp -rp /var/* /mnt\n",
                      "umount /mnt\n",
                      "echo 'copied contents of /var'\n",
                      "mount /dev/xvdh /mnt\n",
                      "cp -rp /tmp/* /mnt\n",
                      "cp -rp /tmp/.ICE* /mnt\n",
                      "umount /mnt\n",
                      "echo 'copied contents of /tmp'\n",
                      "mount -a\n",
                      "echo 'mounted new file systems'\n",
                      "chmod 777 /tmp\n",
                      "chmod a+t /tmp\n",
                      "mkdir /data/log\n",
                      "echo 'completed add_volumes'\n"
                    ]
                  ]
                },
                "mode": "000554",
                "owner": "root"
              }
            },
            "commands": {
              "01_run_script": { "command": "bash /mnt/add_volumes.sh > /var/log/add_volumes.log 2>&1" }
            }
          },

          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.XgemailServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init -v -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r XgemailServerInstance",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },

          "reset_chef": {
            "commands": {
              "01_reset_chef": {
                "command": "/opt/sophos/bin/reset_chef.sh"
              }
            }
          },

          "reset_cookbooks": {
            "commands": {
              "01_reset_cookbooks": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "/opt/sophos/bin/reset_cookbooks.py ",
                      "-r us-west-2 ",
                      "-f ",
                      { "Ref": "Branch" },
                      "/xgemail-infrastructure ",
                      "-p ",
                      { "Ref": "AesDecryptionKey" },
                      " > /var/log/sophos/reset_cookbooks.output 2>&1"
                    ]
                  ]
                }
              }
            }
          },

          "create_image": {
            "files": {
              "/var/sophos/cookbooks/attributes.json": {
                "content": {
                  "Fn::Join": [
                    "\n", [
                      "{",
                      "    \"ami\": {",
                      "        \"ami_bucket\":                  \"{{ami_bucket}}\",",
                      "        \"application_name\":            \"{{application_name}}\",",
                      "        \"branch\":                      \"{{branch}}\",",
                      "        \"build\":                       \"{{build}}\",",
                      "        \"environment\":                 \"{{environment}}\",",
                      "        \"region\":                      \"{{region}}\"",
                      "    },",
                      "    \"sophos_cloud\": {",
                      "        \"application\":                 \"{{s3_app_repo_url}}/{{java_branch}}\",",
                      "        \"aeskey\":                      \"{{aes_decryption_key}}\",",
                      "        \"context\":                     \"{{environment}}\",",
                      "        \"environment\":                 \"{{environment}}\",",
                      "        \"cookbooks\":                   \"{{s3_cookbook_repo_url}}\",",
                      "        \"java\":                        \"{{s3_3rdparty_repo_url}}/jdk\",",
                      "        \"jdk_version\":                 \"{{jdk_version}}\",",
                      "        \"savi\":                        \"{{s3_3rdparty_repo_url}}/savi-install.tar.gz\",",
                      "        \"thirdparty\":                  \"{{s3_3rdparty_repo_url}}\"",
                      "    },",
                      "    \"xgemail\": {",
                      "        \"jilter_inbound_version\":      \"{{jilter_inbound_version}}\",",
                      "        \"jilter_outbound_version\":     \"{{jilter_outbound_version}}\"",
                      "    }",
                      "}",
                      ""
                    ]
                  ]
                },
                "context": {
                  "aes_decryption_key":                         { "Ref": "AesDecryptionKey" },
                  "ami_bucket":                                 { "Ref": "AmiBucket" },
                  "application_name":                           { "Ref": "ApplicationName" },
                  "branch":                                     { "Ref": "Branch" },
                  "build":                                      { "Ref": "Build" },
                  "environment":                                { "Ref": "Environment" },
                  "java_branch":                                { "Ref": "JavaBranch" },
                  "jdk_version":                                { "Ref": "JdkVersion" },
                  "jilter_inbound_version":                     { "Ref": "JilterInboundVersion"},
                  "jilter_outbound_version":                    { "Ref": "JilterOutboundVersion"},
                  "region":                                     { "Ref": "AWS::Region" },
                  "s3_3rdparty_repo_url":                       { "Ref": "S3Sophos3rdPartyRepositoryUrl" },
                  "s3_app_repo_url":                            { "Ref": "S3SophosAppRepositoryUrl" },
                  "s3_cookbook_repo_url":                       { "Ref": "S3CookbookRepositoryUrl" }
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_configure_node_run_list": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "knife node run_list add -z `knife node list -z` \"",
                      "recipe[sophos-cloud-fluentd::install],",
                      "recipe[sophos-cloud-xgemail::install_monit_service],",
                      "recipe[sophos-cloud-xgemail::download_libspf2],",
                      "recipe[sophos-cloud-xgemail::ami]",

                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [
                    " ", [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.xgemail_ami.install.service.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              }
            }
          }
        }
      },

      "Properties": {
        "BlockDeviceMappings": [
          { "DeviceName": "/dev/xvdf", "Ebs": { "DeleteOnTermination": "true", "VolumeSize": { "Ref": "BlockDeviceMappingsXvdf" } } },
          { "DeviceName": "/dev/xvdg", "Ebs": { "DeleteOnTermination": "true", "VolumeSize": { "Ref": "BlockDeviceMappingsXvdg" } } },
          { "DeviceName": "/dev/xvdh", "Ebs": { "DeleteOnTermination": "true", "VolumeSize": { "Ref": "BlockDeviceMappingsXvdh" } } }
        ],
        "IamInstanceProfile": { "Ref": "IamProfile" },
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "VpcSecurityGroup" } ],
            "SubnetId": { "Ref": "VpcSubnetId" }
          }
        ],
        "Monitoring": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  "AmiCandidate",
                  { "Ref": "ApplicationName" },
                  { "Ref": "Branch" },
                  { "Ref": "Environment" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",

                "set -o xtrace   # Print commands and their arguments as they are executed.\n",
                "set -o errexit  # Exit immediately if a command exits with a non-zero status.\n",
                "set -o nounset  # Treat unset variables as an error when substituting.\n",
                "set -o pipefail # Pipeline status comes from last error, not last command.\n",

                "# Make sure we call cfn-signal before exiting, otherwise we have to\n",
                "# wait for the CreationPolicy timeout to detect failed initialization.\n",
                "# That's because of using the bash errexit option, which makes the script\n",
                "# exit immediately as soon as any command, e.g. yum or cfn-init, fails.\n",

                "onexit() {\n",
                "  # Save exit code for call to cfn-signal below.\n",
                "  EXIT_CODE=$?\n",
                "",
                "  # Upload logs before reporting failure to avoid race against termination.\n",
                "  LOG_DIR=/tmp/create-", { "Ref": "ApplicationName" }, "-ami-build", { "Ref": "Build" }, "\n",
                "",
                "  cd /tmp\n",
                "  rm -rf ${LOG_DIR}\n",
                "  rm -rf ${LOG_DIR}.zip\n",
                "",
                "  mkdir -p ${LOG_DIR}/var\n",
                "  for LEAF in chef log sophos; do\n",
                "    if [ -d /var/${LEAF} -o -f /var/${LEAF} ]; then\n",
                "      ln -s /var/${LEAF} ${LOG_DIR}/var/${LEAF}\n",
                "    fi\n",
                "  done\n",
                "",
                "  cd /tmp\n",
                "  zip -r ${LOG_DIR}.zip $(basename ${LOG_DIR})\n",
                "",
                "  aws s3 cp --region us-west-2 ${LOG_DIR}.zip",
                " s3://", { "Ref": "AmiBucket" }, "/", { "Ref": "Branch" },
                "/build-", { "Ref": "Build" }, "/\n",
                "",
                "  # Now we can safely emit the signal.\n",
                "  /opt/aws/bin/cfn-signal -e $EXIT_CODE",
                " --stack ", { "Ref": "AWS::StackName" },
                " --region ", { "Ref": "AWS::Region" },
                " --resource XgemailServerInstance\n",
                "}\n",

                "trap onexit EXIT\n",

                "# Wait for a live internet connection.\n",

                "while true; do\n",
                "  wget -q --tries=10 --timeout=2 http://www.google.com -O /tmp/index.site &> /dev/null || true\n",
                "  if [ ! -s /tmp/index.site ]; then\n",
                "    echo No connection to internet\n",
                "  else\n",
                "    echo Connection to internet established\n",
                "    break\n",
                "  fi\n",
                "  sleep 5\n",
                "done\n",

                "# Configure auth protocol used with S3, to enable KMS/SSE requests.\n",

                "aws configure set default.s3.signature_version s3v4\n",

                "# Push the Public IP of the instance to S3 for artifact retrieval via Bamboo.\n",

                "PUBLIC_IP=ip-address-", { "Ref": "ApplicationName" }, "-ami-build", { "Ref": "Build" }, "\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/public-ipv4 > /tmp/${PUBLIC_IP}.txt\n",

                "aws s3 cp --region us-west-2 /tmp/${PUBLIC_IP}.txt",
                " s3://", { "Ref": "AmiBucket" }, "/", { "Ref": "Branch" },
                "/build-", { "Ref": "Build" }, "/\n",

                "# Install all security and aws updates.\n",

                "yum update -y -t --security\n",
                "yum update -y -t aws-amitools-ec2\n",
                "yum update -y -t aws-cfn-bootstrap\n",
                "yum update -y -t aws-cli\n",

                "# Read metadata and configure system accordingly.\n",

                "/opt/aws/bin/cfn-init",
                " --stack ", { "Ref": "AWS::StackName" },
                " --region ", { "Ref": "AWS::Region" },
                " --resource XgemailServerInstance",
                " --configsets svcapi_install",
                " -v",
                "\n",

                "# Now the onexit function will get called.\n"
              ]
            ]
          }
        }
      }
    }
  },

  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "XgemailServerInstance"
      }
    },
    "AvailabilityZone": {
      "Value": {
        "Fn::GetAtt": [ "XgemailServerInstance", "AvailabilityZone" ]
      }
    },
    "PrivateIp": {
      "Value": {
        "Fn::GetAtt": [ "XgemailServerInstance", "PrivateIp" ]
      }
    },
    "PublicIp": {
      "Value": {
        "Fn::GetAtt": [ "XgemailServerInstance", "PublicIp" ]
      }
    },
    "DNSName": {
      "Value": {
        "Fn::GetAtt": [ "XgemailServerInstance", "PublicDnsName" ]
      }
    }
  }
}
