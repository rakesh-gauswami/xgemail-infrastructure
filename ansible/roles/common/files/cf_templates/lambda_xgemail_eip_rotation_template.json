{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Creates/Updates/Deletes the Xgemail Eip Rotation lambda function stored in S3.",

  "Metadata": {
    "Copyright": [
      "Copyright 2018, Sophos Limited. All rights reserved.",
      "",
      "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
      "Sophos Limited and Sophos Group.  All other product and company",
      "names mentioned are trademarks or registered trademarks of their",
      "respective owners."
    ],

    "Comments": [
      "NOTE: The template requires a valid IAM role arn that allows",
      "the lambda code to access AWS resources."
    ]
  },

  "Parameters": {
    "Environment": {
      "Description": "(dev2, dev3, dev4, dev5, qa, etc...)",
      "Type": "String"
    },
    "FunctionDescription": {
      "Description": "Description for this function.",
      "Type": "String",
      "Default": "Triggered from a CloudWatch Schedule this Lambda function will rotate Elastic Ip Addresses on Xgemail Internet (X)Delivery Instances."
    },

    "FunctionName": {
      "Description": "The name for this function.  Defaults to a unique physical ID.",
      "Type": "String",
      "Default": ""
    },

    "HandlerName": {
      "Description": "The name of the handler declared in source code.",
      "Type": "String"
    },

    "IAMRoleArn": {
      "Description": "The IAM role that Lambda assumes when it runs your code to access AWS services.",
      "Type": "String"
    },

    "MemorySize": {
      "Description": "The amount of memory to allocate for this lambda function (128-1536)",
      "Type": "Number",
      "Default": "256"
    },

    "Runtime": {
      "Description": "The scripting runtime the code runs on.",
      "Type": "String",
      "Default": "python2.7"
    },

    "S3Bucket": {
      "Description": "The S3 bucket where the code has been placed.",
      "Type": "String"
    },

    "S3Key": {
      "Description": "The object key name in S3 (no slash in the beginning).",
      "Type": "String"
    },

    "ScheduleExpression": {
      "Description": "The schedule or rate (frequency) that determines when to execute. E.g. 'cron(0 6 * * ? *)' or 'rate(10 minutes)'",
      "Type": "String",
      "Default": ""
    },

    "ScheduleState": {
      "Description": "The state of the scheduled event. ENABLED or DISABLED",
      "Type": "String",
      "Default": "DISABLED",
      "AllowedValues": [
        "ENABLED",
        "DISABLED"
      ]
    },

    "SsmPostfixService": {
      "Description": "The SSM Document to Start or Stop Postfix.",
      "Type": "String"
    },

    "SsmUpdateHostname": {
      "Description": "The SSM Document to Update the Hostname.",
      "Type": "String"
    },

    "Timeout": {
      "Description": "Timeout in seconds.",
      "Type": "Number",
      "Default": "300",
      "MinValue": "30",
      "MaxValue": "300"
    }
  },

  "Conditions": {
    "HasFunctionName": {
      "Fn::Not": [{ "Fn::Equals": [ { "Ref": "FunctionName" }, "" ] }]
    },
    "HasSchedule": {
      "Fn::Not": [{ "Fn::Equals": [ { "Ref": "ScheduleExpression" }, "" ] }]
    }
  },

  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": { "Ref": "S3Key" }
        },
        "Description": { "Ref": "FunctionDescription" },
        "Environment": {
          "Variables": {
            "ACCOUNT": { "Ref": "Environment" },
            "SSM_POSTFIX_SERVICE": { "Ref": "SsmPostfixService" },
            "SSM_UPDATE_HOSTNAME": { "Ref": "SsmUpdateHostname" }
          }
        },
        "FunctionName": {
          "Fn::If": [
            "HasFunctionName",
            { "Ref": "FunctionName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "Handler": { "Ref": "HandlerName" },
        "Role": { "Ref": "IAMRoleArn" },
        "Runtime": { "Ref": "Runtime" },
        "Timeout": { "Ref": "Timeout" },
        "MemorySize": {"Ref": "MemorySize"},
        "ReservedConcurrentExecutions": "1",
        "Tags": [
          {
            "Key": "Application",
            "Value": "CloudEmail"
          },
          {
            "Key": "BusinessUnit",
            "Value": "MSG"
          },
          {
            "Key": "Name",
            "Value": { "Ref": "FunctionName" }
          },
          {
            "Key": "OwnerEmail",
            "Value": "sophosmailops@sophos.com"
          },
          {
            "Key": "Project",
            "Value": "xgemail"
          }
        ]
      }
    },

    "LambdaFunctionVersion": {
      "Type": "AWS::Lambda::Version",
      "DependsOn": "LambdaFunction",
      "Properties": {
        "Description": {
          "Fn::Join": [ "", [
            "Sophos Central code: ",
            { "Ref": "HandlerName" }
          ]]
        },
        "FunctionName": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }
      }
    },

    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Condition": "HasSchedule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": { "Ref": "ScheduleExpression" },
        "State": { "Ref": "ScheduleState" },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": { "Ref": "LambdaFunction" }
          }
        ]
      }
    },

    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Condition" : "HasSchedule",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledRule",
            "Arn"
          ]
        }
      }
    }
  },

  "Outputs": {
    "LambdaFunction": {
      "Description": "The Lambda Function's Name.",
      "Value": { "Ref": "LambdaFunction" }
    },
    "LambdaFunctionArn": {
      "Description": "ARN of the function created.",
      "Value": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }
    }
  }
}
