{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Sophos Email AutoScaling Group template for Sophos Cloud used for customer-xdelivery EC2 Instances in Private and Public subnet.",

  "Metadata": {
    "Copyright": [
      "Copyright 2021, Sophos Limited. All rights reserved.",
      "",
      "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
      "Sophos Limited and Sophos Group.  All other product and company",
      "names mentioned are trademarks or registered trademarks of their",
      "respective owners."
    ],

    "Comments": [
      "Xgemail Extended Delivery Instances are for delivering email that is temporarily undeliverable.",
      "After a configurable number of attempts delivery instances will be able to transfer messages here.",
      "These instances are also for assisting the AutoScaling of Delivery Instances during termination.",
      "They may transfer mail to Extended Delivery preventing the loss of email.",
      "We use auto-scaling here for repair but not horizontal scaling.",
      "We need to associate each replica member with a set of volumes.",
      "Since each volume lives in a specific AZ, each replica member",
      "must live in the AZ that its volumes live in.",
      "So we create a separate auto-scaling group with a dedicated AZ",
      "for each replica set member."
    ]
  },

  "Parameters": {
    "AesDecryptionKey": {
      "Description": "Decryption key for encrypted buckets",
      "Type": "String"
    },
    "AmiId": {
      "Description": "AMI ID to use as a base for the stack",
      "Type": "String"
    },
    "AutoScalingInstanceRoleArn": {
      "Description": "Arn of the AutoScaling Role.",
      "Type": "String"
    },
    "AutoScalingMaxSize": {
      "Description": "Maximum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "12"
    },
    "AutoScalingMinSize": {
      "Description": "Minimum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "3"
    },
    "AutoScalingNotificationTopicARN": {
      "Description": "ARN for SNS Topic that should receive launch and termination notifications",
      "Type": "String"
    },
    "AvailabilityZoneIndex": {
      "Description": "Zero-based index for selecting availability zone (0=a, 1=b, etc.)",
      "Type": "String",
      "AllowedPattern": "^[0-9]$"
    },
    "AvailabilityZones": {
      "Description": "List of Availability Zones with Public and Private Subnets",
      "Type": "List<String>",
      "ConstraintDescription": "must be a comma-separated list of valid Availability Zones for the selected VPC"
    },
    "Branch": {
      "Description": "(Develop, CPLAT-XXXX, etc...)",
      "Type": "String"
    },
    "BuildVersion": {
      "Description": "Version of the application from Bamboo",
      "Type": "String",
      "Default": "1.0"
    },
    "BundleVersion": {
      "Description": "Version of the AMI bundle",
      "Type": "Number"
    },
    "CidrSnsSqsQueue": {
      "Description": "The SNS-SQS Queue where XGEMAIL messages are sent from public CD instance",
      "Type": "String",
      "Default": ""
    },
    "CidrSnsSqsQueueUrl": {
      "Description": "URL for the SNS-SQS Queue where XGEMAIL messages are sent from public CD instance",
      "Type": "String",
      "Default": ""
    },
    "EbsMinIops": {
      "Description": "Total IOPS to reserve",
      "Type": "Number",
      "Default": "0",
      "MinValue": "0",
      "MaxValue": "4000"
    },
    "EipCount": {
      "Description": "The number of Eips to use in Multi-Eip rotation",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "Environment": {
      "Description": "(dev2, dev3, dev4, dev5, qa, etc...)",
      "Type": "String"
    },
    "HealthCheckGracePeriod": {
      "Description": "The seconds after an instance comes into service that health checks starts.",
      "Type": "Number",
      "Default": "600"
    },
    "InstanceProfile": {
      "Description": "Instance profile for accessing aws resources",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "t3.large"
    },
    "KeyName": {
      "Description": "Key pair used to SSH to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "KeyNamePub": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Key pair used to SSH to the instance"
    },
    "LifecycleHookLaunching": {
      "Description": "Name of the Launching Lifecycle Hook.",
      "Type": "String"
    },
    "LoadBalancerName": {
      "Description": "Name for the ELB to attach to the Auto Scaling Group",
      "Type": "List<String>"
    },
    "LoadBalancerNamePub": {
      "Description": "Name for the ELB to attach to the Auto Scaling Group",
      "Type": "List<String>"
    },
    "MsgHistoryV2BucketName" : {
      "Description" : "Message History s3 bucket name for writing failure records",
      "Type": "String"
    },
    "MsgHistoryV2DynamoDbTableName": {
      "Description": "Name of the message history DynamoDB table",
      "Type": "String"
    },
    "MsgHistoryV2StreamName" : {
      "Description" : "Message History firehose stream name",
      "Type": "String"
    },
    "NewRelicEnabled": {
      "Description": "Enable New Relic Infrastructure Monitoring",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [ "true", "false" ]
    },
    "S3CookbookRepositoryURL": {
      "Description": "The absolute S3 path to the cookbooks tar/zip used to install the application.",
      "Type": "String",
      "Default": "//cloud-applications/develop/cookbooks.enc"
    },
    "ScaleDownOnWeekends": {
      "Description": "Enable scale down to zero on Saturday at midnight and scale back on Monday morning. (Times are UTC, NON PROD/QA ENVIRONMENT ONLY)",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "SecurityGroups": {
      "Description": "The security group that allows communication within the VPC.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SecurityGroupsPub": {
      "Description": "The security group that allows communication within the VPC.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SpotPrice": {
      "Description": "Spot price",
      "Type": "String",
      "Default": "-1"
    },
    "StationVpcId" : {
      "Description" : "Cloud Station VPC id ",
      "Type" : "String",
      "Default": ""
    },
    "StationVpcName": {
      "Description": "Name of the CloudStation VPC",
      "Type": "String",
      "Default": "CloudStation"
    },
    "UpdateInterval": {
      "Description": "The interval in minutes cfn-hup watches stack modifications.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "30"
    },
    "VolumeSetId": {
      "Description": "Identifier to be combined with stack name and availability zone to associate volumes with an instance",
      "Type": "String",
      "Default": ""
    },
    "VolumeSetIdPub": {
      "Description": "Identifier to be combined with stack name and availability zone to associate volumes with an instance",
      "Type": "String",
      "Default": ""
    },
    "VolumeTrackerSimpleDbDomain": {
      "Description": "Name of Simple DB Domain used to track persistent EBS volumes",
      "Type": "String"
    },
    "Vpc": {
      "Description": "ID of an existing VPC",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcName": {
      "Description": "Name of an existing VPC",
      "Type": "String",
      "Default": "CloudStation"
    },
    "VpcZoneIdentifiers": {
      "Description": "The list of Public Subnets for your VPC",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "must be a comma-separated list of valid Public Subnets for the selected VPC"
    },
    "VpcZoneIdentifiersPub": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Public Subnets for your VPC",
      "ConstraintDescription": "must be a comma-separated list of valid Public Subnets for the selected VPC"
    },
    "XgemailMinSizeDataGB": {
      "Description": "Total GB to reserve for storing data files",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "16384"
    },
    "XgemailMsgHistoryStatusQueueUrl" : {
      "Description" : "URL for the SQS Queue where Message History delivery status events are sent",
      "Type" : "String",
      "Default": ""
    },
    "XgemailMsgHistoryStatusSnsArn": {
      "Description" : "ARN for the SNS Topic where Message History delivery status events are published",
      "Type" : "String",
      "Default": ""
    },
    "XgemailPolicyBucketName" : {
      "Description" : "Name of the S3 Bucket where XGEMAIL policy docs are stored",
      "Type" : "String",
      "Default": ""
    },
    "XgemailServiceType": {
      "Description": "Service type for the xgemail instance (Defaults to unknown so not to break builds)",
      "Type": "String",
      "Default": "unknown"
    },
    "XgemailServiceTypePub": {
      "Description": "Service type for the xgemail instance (Defaults to unknown so not to break builds)",
      "Type": "String",
      "Default": "unknown"
    }
  },

  "Mappings": {
    "RegionConfigMap": {
      "af-south-1": {
        "Name": "Africa (Cape Town)",
        "PrivateDns": "af-south-1.compute.internal"
      },
      "ap-east-1": {
        "Name": "Asia Pacific (Hong Kong)",
        "PrivateDns": "ap-east-1.compute.internal"
      },
      "ap-northeast-1": {
        "Name": "Asia Pacific (Tokyo)",
        "PrivateDns": "ap-northeast-1.compute.internal"
      },
      "ap-northeast-2": {
        "Name": "Asia Pacific (Seoul)",
        "PrivateDns": "ap-northeast-2.compute.internal"
      },
      "ap-northeast-3": {
        "Name": "Asia Pacific (Osaka)",
        "PrivateDns": "ap-northeast-3.compute.internal"
      },
      "ap-south-1": {
        "Name": "Asia Pacific (Mumbai)",
        "PrivateDns": "ap-south-1.compute.internal"
      },
      "ap-southeast-1": {
        "Name": "Asia Pacific (Singapore)",
        "PrivateDns": "ap-southeast-1.compute.internal"
      },
      "ap-southeast-2": {
        "Name": "Asia Pacific (Sydney)",
        "PrivateDns": "ap-southeast-2.compute.internal"
      },
      "ap-southeast-3": {
        "Name": "Asia Pacific (Jakarta)",
        "PrivateDns": "ap-southeast-3.compute.internal"
      },
      "eu-central-1": {
        "Name": "Europe (Frankfurt)",
        "PrivateDns": "eu-central-1.compute.internal"
      },
      "eu-north-1": {
        "Name": "Europe (Stockholm)",
        "PrivateDns": "eu-north-1.compute.internal"
      },
      "eu-south-1": {
        "Name": "Europe (Milan)",
        "PrivateDns": "eu-south-1.compute.internal"
      },
      "eu-west-1": {
        "Name": "EU (Ireland)",
        "PrivateDns": "eu-west-1.compute.internal"
      },
      "eu-west-2": {
        "Name": "Europe (London)",
        "PrivateDns": "eu-west-2.compute.internal"
      },
      "eu-west-3": {
        "Name": "Europe (Paris)",
        "PrivateDns": "eu-west-3.compute.internal"
      },
      "me-south-1": {
        "Name": "Middle East (Bahrain)",
        "PrivateDns": "me-south-1.compute.internal"
      },
      "sa-east-1": {
        "Name": "South America (Sao Paulo)",
        "PrivateDns": "sa-east-1.compute.internal"
      },
      "us-east-1": {
        "Name": "US East (N. Virginia)",
        "PrivateDns": "ec2.internal"
      },
      "us-east-2": {
        "Name": "US East (Ohio)",
        "PrivateDns": "us-east-2.compute.internal"
      },
      "us-west-1": {
        "Name": "US West (N. California)",
        "PrivateDns": "us-west-1.compute.internal"
      },
      "us-west-2": {
        "Name": "US West (Oregon)",
        "PrivateDns": "us-west-2.compute.internal"
      }
    }
  },

  "Conditions": {
    "EnableDetailedMonitoring": {
      "Fn::Equals": [ { "Ref": "Environment" }, "prod" ]
    },
    "UseSpotPrice": {
      "Fn::And": [
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Environment" },  "prod" ] } ] },
        { "Fn::Not": [ { "Fn::Equals": [ {"Ref": "SpotPrice"},  "-1" ] } ] }
      ]
    },
    "EnableScaleDownOnWeekends": {
      "Fn::And": [
        {
          "Fn::Not": [
            { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "Environment" }, "prod" ] }, { "Fn::Equals": [ { "Ref": "Environment" }, "qa" ] } ] }
          ]
        },
        { "Fn::Equals": [ { "Ref": "ScaleDownOnWeekends" }, "true" ] }
      ]
    },

    "IsInfDevelopmentEnvironment": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "Environment" }, "inf" ] },
        { "Fn::Equals": [ { "Ref": "Environment" }, "qainf" ] },
        { "Fn::Equals": [ { "Ref": "Environment" }, "dev" ] }
      ]
    }
  },

  "Resources": {
    "XgemailAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "AutoScalingMinSize" },
          "Timeout": "PT20M"
        }
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Select": [
              { "Ref": "AvailabilityZoneIndex" },
              { "Ref": "AvailabilityZones" }
            ]
          }
        ],
        "Cooldown": "200",
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": "ELB",
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref":"XgemailAutoScalingLaunchTemplate" },
          "Version": {"Fn::GetAtt": ["XgemailAutoScalingLaunchTemplate", "LatestVersionNumber"]}
        },
        "LoadBalancerNames": { "Ref": "LoadBalancerName" },
        "MaxSize": { "Ref": "AutoScalingMaxSize" },
        "MinSize": { "Ref": "AutoScalingMinSize" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [ ":",
                [
                  { "Ref": "VpcName" },
                  { "Ref": "XgemailServiceType" },
                  { "Ref": "Branch" },
                  { "Ref": "BundleVersion" }
                ]
              ]
            },
            "PropagateAtLaunch": true
          }, {
            "Key": "BuildResultKey",
            "Value": { "Ref": "BuildVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BundleVersion",
            "Value": { "Ref": "BundleVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Application",
            "Value": { "Ref": "XgemailServiceType" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BaseAmi",
            "Value": { "Ref": "AmiId" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BusinessUnit",
            "Value": "MSG",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "OwnerEmail",
            "Value": "sophosmailops@sophos.com",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Project",
            "Value": "xgemail",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceCategory",
            "Value": { "Fn::Sub": "${VpcName}:email" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceType",
            "Value": { "Fn::Sub": "${VpcName}:${XgemailServiceType}" },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::Select": [
              { "Ref": "AvailabilityZoneIndex" },
              { "Ref": "VpcZoneIdentifiers" }
            ]
          }
        ]
      }
    },

    "XgemailAutoScalingGroupPub": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "AutoScalingMinSize" },
          "Timeout": "PT20M"
        }
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Select": [
              { "Ref": "AvailabilityZoneIndex" },
              { "Ref": "AvailabilityZones" }
            ]
          }
        ],
        "Cooldown": "200",
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": "ELB",
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref":"XgemailAutoScalingLaunchTemplatePub" },
          "Version": {"Fn::GetAtt": ["XgemailAutoScalingLaunchTemplatePub", "LatestVersionNumber"] }
        },
        "LifecycleHookSpecificationList" : [
          {
            "LifecycleHookName": { "Ref": "LifecycleHookLaunching" },
            "HeartbeatTimeout" : "300",
            "LifecycleTransition" : "autoscaling:EC2_INSTANCE_LAUNCHING",
            "NotificationTargetARN" : { "Ref": "AutoScalingNotificationTopicARN" },
            "RoleARN" : { "Ref": "AutoScalingInstanceRoleArn" }
          }
        ],
        "LoadBalancerNames": { "Ref": "LoadBalancerNamePub" },
        "MaxSize": { "Ref": "AutoScalingMaxSize" },
        "MinSize": { "Ref": "AutoScalingMinSize" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [ ":",
                [
                  { "Ref": "VpcName" },
                  { "Ref": "XgemailServiceTypePub" },
                  { "Ref": "Branch" },
                  { "Ref": "BundleVersion" }
                ]
              ]
            },
            "PropagateAtLaunch": true
          }, {
            "Key": "BuildResultKey",
            "Value": { "Ref": "BuildVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BundleVersion",
            "Value": { "Ref": "BundleVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Application",
            "Value": { "Ref": "XgemailServiceTypePub" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BaseAmi",
            "Value": { "Ref": "AmiId" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BusinessUnit",
            "Value": "MSG",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "EipCount",
            "Value": { "Ref": "EipCount" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "OwnerEmail",
            "Value": "sophosmailops@sophos.com",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Project",
            "Value": "xgemail",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceCategory",
            "Value": { "Fn::Sub": "${VpcName}:email" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceType",
            "Value": { "Fn::Sub": "${VpcName}:${XgemailServiceTypePub}" },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::Select": [
              { "Ref": "AvailabilityZoneIndex" },
              { "Ref": "VpcZoneIdentifiersPub" }
            ]
          }
        ]
      }
    },

    "XgemailAutoScalingLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "xgemail_install": [
              "attributes",
              "update_cookbooks",
              "xgemail_install",
              "tag_volume"
            ],
            "xgemail_update": [
              "attributes",
              "update_cookbooks",
              "xgemail_update"
            ]
          },

          "attributes": {
            "files": {
              "/var/sophos/cookbooks/attributes.json": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "{\n",
                      "  \"sophos_cloud\" : {\n",
                      "    \"application_name\"               : \"{{cluster}}\",\n",
                      "    \"application_type\"               : \"xgemail\",\n",
                      "    \"availability_zone\"              : \"{{availability_zone}}\",\n",
                      "    \"connections\"                    : \"cloud-{{environment}}-connections\",\n",
                      "    \"configs\"                        : \"cloud-{{environment}}-configs\",\n",
                      "    \"context\"                        : \"{{environment}}\",\n",
                      "    \"environment\"                    : \"{{environment}}\",\n",
                      "    \"branch\"                         : \"{{branch}}\",\n",
                      "    \"cluster\"                        : \"{{cluster}}\",\n",
                      "    \"client-endpoint\"                : \"{{region}}\",\n",
                      "    \"region\"                         : \"{{region}}\",\n",
                      "    \"vpc_id\"                         : \"{{vpc_id}}\",\n",
                      "    \"vpc_name\"                       : \"{{vpc_name}}\"\n",
                      "  },\n",
                      "  \"tomcat\" : {\n",
                      "    \"should_update_keystore\"         : \"false\"\n",
                      "  },\n",
                      "  \"cert\" : {\n",
                      "    \"should_install_mx\"              : \"true\"\n",
                      "  },\n",
                      "  \"volumes\" : {\n",
                      "    \"volume_min_iops\"                : \"{{volume_min_iops}}\",\n",
                      "    \"volume_min_size_data_gb\"        : \"{{volume_min_size_data_gb}}\",\n",
                      "    \"volume_mount_point\"             : \"storage\",\n",
                      "    \"volume_set_id\"                  : \"{{volume_set_id}}\",\n",
                      "    \"volume_snapshot_hour\"           : \"0\",\n",
                      "    \"volume_snapshot_weekday\"        : \"0\",\n",
                      "    \"volume_tracker_sdb_domain\"      : \"{{volume_tracker_sdb_domain}}\"\n",
                      "  },\n",
                      "  \"newrelic\" : {\n",
                      "    \"enabled\"                                : \"{{newrelic_enabled}}\"\n",
                      "  },\n",
                      "  \"xgemail\" : {\n",
                      "    \"cluster_type\"                   : \"{{cluster_type}}\",\n",
                      "    \"msg_history_status_queue_url\"   : \"{{msg_history_status_queue_url}}\",\n",
                      "    \"msg_history_status_sns_arn\"     : \"{{msg_history_delivery_status_sns_arn}}\",\n",
                      "    \"msg_history_v2_bucket_name\"     : \"{{msg_history_v2_bucket_name}}\",\n",
                      "    \"msg_history_v2_dynamodb_table_name\" : \"{{msg_history_v2_dynamodb_table_name}}\",\n",
                      "    \"msg_history_v2_stream_name\"     : \"{{msg_history_v2_stream_name}}\",\n",
                      "    \"msg_notifier_queue_url\"         : \"{{msg_notifier_queue_url}}\",\n",
                      "    \"notification_sns_arn\"           : \"{{notification_sns_arn}}\",\n",
                      "    \"station_vpc_id\"                 : \"{{station_vpc_id}}\",\n",
                      "    \"station_vpc_name\"               : \"{{station_vpc_name}}\",\n",
                      "    \"xgemail_policy_bucket_name\"     : \"{{xgemail_policy_bucket_name}}\"\n",
                      "  }\n",
                      "}\n"
                    ]
                  ]
                },
                "context": {
                  "availability_zone":                        { "Fn::Select": [
                                                                { "Ref": "AvailabilityZoneIndex" },
                                                                { "Ref": "AvailabilityZones" }
                                                              ] },
                  "branch":                                   { "Ref": "Branch" },
                  "cluster":                                  { "Ref": "XgemailServiceType" },
                  "cluster_type":                             { "Ref": "XgemailServiceType" },
                  "environment":                              { "Ref": "Environment" },
                  "msg_history_status_queue_url":             { "Ref": "XgemailMsgHistoryStatusQueueUrl" },
                  "msg_history_delivery_status_sns_arn":      { "Ref": "XgemailMsgHistoryStatusSnsArn"},
                  "msg_history_v2_bucket_name":               { "Ref": "MsgHistoryV2BucketName" },
                  "msg_history_v2_dynamodb_table_name":       { "Ref": "MsgHistoryV2DynamoDbTableName"},
                  "msg_history_v2_stream_name":               { "Ref": "MsgHistoryV2StreamName" },
                  "newrelic_enabled":                         { "Ref": "NewRelicEnabled" },
                  "region":                                   { "Ref": "AWS::Region" },
                  "station_vpc_id":                           { "Ref": "StationVpcId" },
                  "stack":                                    { "Ref": "AWS::StackName" },
                  "station_vpc_name":                         { "Ref": "StationVpcName" },
                  "volume_min_iops":                          { "Ref": "EbsMinIops" },
                  "volume_min_size_data_gb":                  { "Ref": "XgemailMinSizeDataGB" },
                  "volume_set_id":                            { "Ref": "VolumeSetId" },
                  "volume_tracker_sdb_domain":                { "Ref": "VolumeTrackerSimpleDbDomain" },
                  "vpc_id":                                   { "Ref": "Vpc" },
                  "vpc_name":                                 { "Ref": "VpcName" },
                  "xgemail_policy_bucket_name":               { "Ref": "XgemailPolicyBucketName" }
                },
                "owner": "root",
                "mode": "000444"
              },
              "/var/sophos/modify_attributes_json": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash -xe\n",
                      "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/public-hostname`\n",
                      "sed -i \"s/<<host_name>>/$host_name/g\" ./attributes.json"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000500"
              }
            },

            "commands": {
              "01_modify_attributes_json": {
                "command": "/var/sophos/modify_attributes_json",
                "cwd": "/var/sophos/cookbooks"
              }
            }
          },

          "update_cookbooks": {
            "commands": {
              "00_clean": {
                "command": {
                  "Fn::Join": [ "; ",
                    [
                      "rm -f /var/chef/chef-repo/nodes/*.*",
                      "rm -f /var/chef/chef-repo/cookbooks.enc",
                      "rm -f /var/chef/chef-repo/cookbooks.tar.gz",
                      "rm -rf /var/chef/chef-repo/cookbooks"
                    ]
                  ]
                }
              },
              "01_get_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "aws s3 cp s3:", { "Ref": "S3CookbookRepositoryURL" }, " /var/chef/chef-repo/cookbooks.enc"
                    ]
                  ]
                },
                "cwd": "/var/chef",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "02_decrypt_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "openssl enc -aes-256-cbc -d -in /var/chef/chef-repo/cookbooks.enc -out /var/chef/chef-repo/cookbooks.tar.gz -pass pass:", { "Ref": "AesDecryptionKey" }
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "03_unpack_cookbook": {
                "command": "tar xvf /var/chef/chef-repo/cookbooks.tar.gz",
                "cwd": "/var/chef/chef-repo"
              }
            }
          },

          "xgemail_install": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "[main]\n",
                      "stack=",  { "Ref": "AWS::StackName" }, "\n",
                      "region=", { "Ref": "AWS::Region" }, "\n",
                      "interval=", { "Ref": "UpdateInterval" }, "\n"
                    ]
                  ]
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.XgemailAutoScalingLaunchTemplate.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackName" }, " -r XgemailAutoScalingLaunchTemplate", " --configsets xgemail_update", " --region ", { "Ref": "AWS::Region" }, "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              },
              "/var/sophos/modify_network_config": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "export private_ip=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                      "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/local-hostname`\n",
                      "export host_entry=\"$private_ip $host_name\"\n",
                      "echo $host_entry\n",
                      "echo > /etc/hosts\n",
                      "echo 127.0.0.1 $host_name localhost >> /etc/hosts\n",
                      "echo $host_entry >> /etc/hosts\n",
                      "echo >> /etc/dhcp/dhclient.conf\n",
                      "echo 'supersede domain-name \"", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] },  "\";' >> /etc/dhcp/dhclient.conf\n",
                      "echo >> /etc/resolv.conf\n",
                      "echo 'search ", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] }, "' >> /etc/resolv.conf\n"
                    ]
                  ]
                },
                "owner": "root",
                "mode": "000500"
              }
            },

            "commands": {
              "01_delete_run_list_nodes": { "command": "rm -f /var/chef/chef-repo/nodes/*.*" },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.chef.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "03_configure_node_run_list": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "knife node run_list set -z `knife node list -z` \"",
                      "recipe[sophos-cloud-mount::default],",
                      "recipe[sophos-cloud-mount::install],",
                      "recipe[sophos-cloud-ntpd::default],",
                      "recipe[sophos-cloud-xgemail::deploy_certs],",
                      "recipe[sophos-cloud-xgemail::setup_xgemail_utils_structure],",
                      "recipe[sophos-cloud-fluentd::configure],",
                      "recipe[sophos-cloud-xgemail::configure-extended-delivery-queue],",
                      "recipe[sophos-cloud-newrelic::configure_newrelic_infra],",
                      "recipe[sophos-cloud-xgemail::configure_monit],",
                      "recipe[sophos-cloud-xgemail::run_install_cleanup]",
                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "04_modify_network_config": { "command": "/var/sophos/modify_network_config" },
              "05_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.service.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "06_delete_cfn_hup_config": {
                "command": "rm -f /etc/cfn/hooks.d/cfn-auto-reloader.conf.*"
              }
            },

            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "tag_volume": {
            "files": {
              "/tmp/tag_volume.sh": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash\n",
                      "export AWS_AMI_ID='", { "Ref" : "AmiId" }, "'\n",
                      "export AWS_APPLICATION='", { "Ref": "XgemailServiceType" }, "'\n",
                      "export AWS_BRANCH='", { "Ref" : "Branch" }, "'\n",
                      "export AWS_BUILD_RESULT_KEY='", { "Ref" : "BuildVersion" }, "'\n",
                      "export AWS_BUNDLE_VERSION='", { "Ref" : "BundleVersion" }, "'\n",
                      "export AWS_INSTANCE_ID=$(curl -f http://169.254.169.254/latest/meta-data/instance-id)\n",
                      "export AWS_REGION='", { "Ref" : "AWS::Region" }, "'\n",
                      "export AWS_VPC_NAME='", { "Ref": "VpcName"} , "'\n",
                      "for i in $(aws ec2 describe-volumes --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query Volumes[*].VolumeId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n",
                      "for i in $(aws ec2 describe-network-interfaces --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query NetworkInterfaces[0].NetworkInterfaceId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000755"
              }
            },
            "commands": {
              "01_run_script": { "command": "bash /tmp/tag_volume.sh" }
            }
          },

          "xgemail_update": {
            "commands": {
              "01_setup_node_run_list": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "knife node run_list set -z `knife node list -z` \"",
                      "recipe[sophos-cloud-ntpd::default],",
                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.update.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              }
            }
          }
        }
      },
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": "false",
              "DeviceIndex": "0",
              "Groups": { "Ref": "SecurityGroups" }
            }
          ],
          "Monitoring": {
            "Enabled": {
              "Fn::If": [ "EnableDetailedMonitoring", "true", "false" ]
            }
          },
          "IamInstanceProfile": {
            "Name": { "Ref": "InstanceProfile" }
          },
          "ImageId": { "Ref": "AmiId" },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyName": { "Ref": "KeyName" },
          "InstanceMarketOptions": {
            "Fn::If": [ "UseSpotPrice",
              {
                "MarketType": "spot",
                "SpotOptions": { "MaxPrice": { "Ref": "SpotPrice" } }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [ "",
                [
                  "#!/bin/bash -xe\n",
                  "# Install the files and packages from the metadata\n",
                  "\n",
                  "# Make sure we call cfn-signal before exiting, otherwise we have to\n",
                  "# wait for the CreationPolicy timeout to detect failed initialization.\n",
                  "# That's because of using the bash -e option, which makes the script\n",
                  "# exit immediately as soon as any command, e.g. cfn-init, fails.\n",
                  "\n",
                  "onexit() {\n",
                  "  # Save exit code for call to cfn-signal below.\n",
                  "  exit_code=$?\n",
                  "\n",
                  "  # Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "  set +o errexit\n",
                  "\n",
                  "  # Set LastHealth tag so cloud list command shows progress.\n",
                  "  if [ \"$exit_code\" == 0 ]; then\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataSuccess\n",
                  "    /sbin/service monit start\n",
                  "  else\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataFailure\n",
                  "    # Upload logs before reporting failure to avoid race against termination.\n",
                  "    ACCOUNT='", { "Ref": "Environment" }, "'\n",
                  "    BRANCH='", { "Ref": "Branch" }, "'\n",
                  "    DEPLOYMENT_NAME='", { "Ref": "XgemailServiceType" }, "'\n",
                  "    /opt/sophos/bin/upload_deployment_logs.py -a ${ACCOUNT} -b ${BRANCH} ${DEPLOYMENT_NAME} -c netstat_tuna.out='netstat -tuna'\n",
                  "  fi\n",
                  "\n",

                  "  /opt/aws/bin/cfn-signal -e $exit_code",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingGroup",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "}\n",
                  "\n",

                  "trap onexit EXIT\n",
                  "\n",

                  "# Wait for network access.\n",
                  "/usr/bin/nc -v -z -w 60 www.google.com 80\n",
                  "\n",

                  "# Set LastHealth tag so cloud list command shows progress.\n",
                  "/opt/sophos/bin/set_instance_tag.py LastHealth UserDataStarted\n",
                  "\n",

                  "/opt/aws/bin/cfn-init --verbose ",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingLaunchTemplate ",
                  " --configsets xgemail_install ",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "\n",

                  "# Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "# This is NOT redundant with the call to disable errexit inside onexit,\n",
                  "# because an error that happens earlier than this point will be trapped\n",
                  "# and generate a call to onexit before this code is reached.\n",
                  "set +o errexit\n",
                  "\n",
                  "# Now the onexit function will get called.\n"
                ]
              ]
            }
          }
        }
      }
    },

    "XgemailAutoScalingLaunchTemplatePub": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "xgemail_install": [
              "attributes",
              "update_cookbooks",
              "xgemail_install",
              "tag_volume"
            ],
            "xgemail_update": [
              "attributes",
              "update_cookbooks",
              "xgemail_update"
            ]
          },

          "attributes": {
            "files": {
              "/var/sophos/cookbooks/attributes.json": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "{\n",
                      "  \"sophos_cloud\" : {\n",
                      "    \"application_name\"               : \"{{cluster}}\",\n",
                      "    \"application_type\"               : \"xgemail\",\n",
                      "    \"availability_zone\"              : \"{{availability_zone}}\",\n",
                      "    \"connections\"                    : \"cloud-{{environment}}-connections\",\n",
                      "    \"configs\"                        : \"cloud-{{environment}}-configs\",\n",
                      "    \"context\"                        : \"{{environment}}\",\n",
                      "    \"environment\"                    : \"{{environment}}\",\n",
                      "    \"branch\"                         : \"{{branch}}\",\n",
                      "    \"cluster\"                        : \"{{cluster}}\",\n",
                      "    \"client-endpoint\"                : \"{{region}}\",\n",
                      "    \"region\"                         : \"{{region}}\",\n",
                      "    \"vpc_id\"                         : \"{{vpc_id}}\",\n",
                      "    \"vpc_name\"                       : \"{{vpc_name}}\"\n",
                      "  },\n",
                      "  \"tomcat\" : {\n",
                      "    \"should_update_keystore\"         : \"false\"\n",
                      "  },\n",
                      "  \"cert\" : {\n",
                      "    \"should_install_mx\"              : \"true\"\n",
                      "  },\n",
                      "  \"newrelic\" : {\n",
                      "    \"enabled\"                                : \"{{newrelic_enabled}}\"\n",
                      "  },\n",
                      "  \"volumes\" : {\n",
                      "    \"volume_min_iops\"                : \"{{volume_min_iops}}\",\n",
                      "    \"volume_min_size_data_gb\"        : \"{{volume_min_size_data_gb}}\",\n",
                      "    \"volume_mount_point\"             : \"storage\",\n",
                      "    \"volume_set_id\"                  : \"{{volume_set_id}}\",\n",
                      "    \"volume_snapshot_hour\"           : \"0\",\n",
                      "    \"volume_snapshot_weekday\"        : \"0\",\n",
                      "    \"volume_tracker_sdb_domain\"      : \"{{volume_tracker_sdb_domain}}\"\n",
                      "  },\n",
                      "  \"xgemail\" : {\n",
                      "    \"cluster_type\"                   : \"{{cluster_type}}\",\n",
                      "    \"msg_history_status_queue_url\"   : \"{{msg_history_status_queue_url}}\",\n",
                      "    \"msg_history_status_sns_arn\"     : \"{{msg_history_delivery_status_sns_arn}}\",\n",
                      "    \"msg_history_v2_bucket_name\"     : \"{{msg_history_v2_bucket_name}}\",\n",
                      "    \"msg_history_v2_dynamodb_table_name\" : \"{{msg_history_v2_dynamodb_table_name}}\",\n",
                      "    \"msg_history_v2_stream_name\"     : \"{{msg_history_v2_stream_name}}\",\n",
                      "    \"msg_notifier_queue_url\"         : \"{{msg_notifier_queue_url}}\",\n",
                      "    \"notification_sns_arn\"           : \"{{notification_sns_arn}}\",\n",
                      "    \"station_vpc_id\"                 : \"{{station_vpc_id}}\",\n",
                      "    \"station_vpc_name\"               : \"{{station_vpc_name}}\",\n",
                      "    \"xgemail_policy_bucket_name\"     : \"{{xgemail_policy_bucket_name}}\"\n",
                      "  }\n",
                      "}\n"
                    ]
                  ]
                },
                "context": {
                  "availability_zone":                        { "Fn::Select": [
                                                                { "Ref": "AvailabilityZoneIndex" },
                                                                { "Ref": "AvailabilityZones" }
                                                              ] },
                  "branch":                                   { "Ref": "Branch" },
                  "cluster":                                  { "Ref": "XgemailServiceTypePub" },
                  "cluster_type":                             { "Ref": "XgemailServiceTypePub" },
                  "environment":                              { "Ref": "Environment" },
                  "msg_history_status_queue_url":             { "Ref": "XgemailMsgHistoryStatusQueueUrl" },
                  "msg_history_delivery_status_sns_arn":      { "Ref": "XgemailMsgHistoryStatusSnsArn"},
                  "msg_history_v2_bucket_name":               { "Ref": "MsgHistoryV2BucketName" },
                  "msg_history_v2_dynamodb_table_name":       { "Ref": "MsgHistoryV2DynamoDbTableName"},
                  "msg_history_v2_stream_name":               { "Ref": "MsgHistoryV2StreamName" },
                  "newrelic_enabled":                         { "Ref": "NewRelicEnabled" },
                  "region":                                   { "Ref": "AWS::Region" },
                  "station_vpc_id":                           { "Ref": "StationVpcId" },
                  "stack":                                    { "Ref": "AWS::StackName" },
                  "station_vpc_name":                         { "Ref": "StationVpcName" },
                  "volume_min_iops":                          { "Ref": "EbsMinIops" },
                  "volume_min_size_data_gb":                  { "Ref": "XgemailMinSizeDataGB" },
                  "volume_set_id":                            { "Ref": "VolumeSetIdPub" },
                  "volume_tracker_sdb_domain":                { "Ref": "VolumeTrackerSimpleDbDomain" },
                  "vpc_id":                                   { "Ref": "Vpc" },
                  "vpc_name":                                 { "Ref": "VpcName" },
                  "xgemail_policy_bucket_name":               { "Ref": "XgemailPolicyBucketName" }
                },
                "owner": "root",
                "mode": "000444"
              },
              "/var/sophos/modify_attributes_json": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash -xe\n",
                      "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/public-hostname`\n",
                      "sed -i \"s/<<host_name>>/$host_name/g\" ./attributes.json"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000500"
              }
            },

            "commands": {
              "01_modify_attributes_json": {
                "command": "/var/sophos/modify_attributes_json",
                "cwd": "/var/sophos/cookbooks"
              }
            }
          },

          "update_cookbooks": {
            "commands": {
              "00_clean": {
                "command": {
                  "Fn::Join": [ "; ",
                    [
                    "rm -f /var/chef/chef-repo/nodes/*.*",
                    "rm -f /var/chef/chef-repo/cookbooks.enc",
                    "rm -f /var/chef/chef-repo/cookbooks.tar.gz",
                    "rm -rf /var/chef/chef-repo/cookbooks"
                    ]
                  ]
                }
              },
              "01_get_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "aws s3 cp s3:", { "Ref": "S3CookbookRepositoryURL" }, " /var/chef/chef-repo/cookbooks.enc"
                    ]
                  ]
                },
                "cwd": "/var/chef",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "02_decrypt_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "openssl enc -aes-256-cbc -d -in /var/chef/chef-repo/cookbooks.enc -out /var/chef/chef-repo/cookbooks.tar.gz -pass pass:", { "Ref": "AesDecryptionKey" }
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "03_unpack_cookbook": {
                "command": "tar xvf /var/chef/chef-repo/cookbooks.tar.gz",
                "cwd": "/var/chef/chef-repo"
              }
            }
          },

          "xgemail_install": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["",
                    [
                      "[main]\n", "stack=", { "Ref": "AWS::StackName" }, "\n",
                      "region=", { "Ref": "AWS::Region" }, "\n",
                      "interval=", { "Ref": "UpdateInterval" }, "\n"
                    ]
                  ]
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.XgemailAutoScalingLaunchTemplatePub.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackName" }, " -r XgemailAutoScalingLaunchTemplatePub", " --configsets xgemail_update", " --region ", { "Ref": "AWS::Region" }, "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              },
              "/var/sophos/modify_network_config": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "export private_ip=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                      "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/local-hostname`\n",
                      "export host_entry=\"$private_ip $host_name\"\n",
                      "echo $host_entry\n",
                      "echo > /etc/hosts\n",
                      "echo 127.0.0.1 $host_name localhost >> /etc/hosts\n",
                      "echo $host_entry >> /etc/hosts\n",
                      "echo >> /etc/dhcp/dhclient.conf\n",
                      "echo 'supersede domain-name \"", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] }, "\";' >> /etc/dhcp/dhclient.conf\n",
                      "echo >> /etc/resolv.conf\n",
                      "echo 'search ", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] }, "' >> /etc/resolv.conf\n"
                    ]
                  ]
                },
                "owner": "root",
                "mode": "000500"
              }
            },

            "commands": {
              "01_delete_run_list_nodes": { "command": "rm -f /var/chef/chef-repo/nodes/*.*" },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.chef.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "03_configure_node_run_list": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "knife node run_list set -z `knife node list -z` \"",
                      "recipe[sophos-cloud-mount::default],",
                      "recipe[sophos-cloud-mount::install],",
                      "recipe[sophos-cloud-ntpd::default],",
                      "recipe[sophos-cloud-xgemail::deploy_certs],",
                      "recipe[sophos-cloud-xgemail::setup_xgemail_utils_structure],",
                      "recipe[sophos-cloud-fluentd::configure],",
                      "recipe[sophos-cloud-xgemail::configure-extended-delivery-queue],",
                      "recipe[sophos-cloud-xgemail::configure_monit],",
                      "recipe[sophos-cloud-newrelic::configure_newrelic_infra],",
                      "recipe[sophos-cloud-xgemail::run_install_cleanup]",
                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "04_modify_network_config": { "command": "/var/sophos/modify_network_config" },
              "05_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.service.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "06_delete_cfn_hup_config": {
                "command": "rm -f /etc/cfn/hooks.d/cfn-auto-reloader.conf.*"
              }
            },

            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "tag_volume": {
            "files": {
              "/tmp/tag_volume.sh": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash\n",
                      "export AWS_AMI_ID='", { "Ref" : "AmiId" }, "'\n",
                      "export AWS_APPLICATION='", { "Ref": "XgemailServiceTypePub" }, "'\n",
                      "export AWS_BRANCH='", { "Ref" : "Branch" }, "'\n",
                      "export AWS_BUILD_RESULT_KEY='", { "Ref" : "BuildVersion" }, "'\n",
                      "export AWS_BUNDLE_VERSION='", { "Ref" : "BundleVersion" }, "'\n",
                      "export AWS_INSTANCE_ID=$(curl -f http://169.254.169.254/latest/meta-data/instance-id)\n",
                      "export AWS_REGION='", { "Ref" : "AWS::Region" }, "'\n",
                      "export AWS_VPC_NAME='", { "Ref": "VpcName"} , "'\n",
                      "for i in $(aws ec2 describe-volumes --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query Volumes[*].VolumeId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n",
                      "for i in $(aws ec2 describe-network-interfaces --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query NetworkInterfaces[0].NetworkInterfaceId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000755"
              }
            },
            "commands": {
              "01_run_script": { "command": "bash /tmp/tag_volume.sh" }
            }
          },

          "xgemail_update": {
            "commands": {
              "01_setup_node_run_list": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "knife node run_list set -z `knife node list -z` \"",
                      "recipe[sophos-cloud-ntpd::default],",
                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.update.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": { "HOME": "/var/chef" }
              }
            }
          }
        }
      },
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "Groups": { "Ref": "SecurityGroupsPub" }
            }
          ],
          "Monitoring": {
            "Enabled": { "Fn::If": [ "EnableDetailedMonitoring", "true", "false"] }
          },
          "IamInstanceProfile": {
            "Name": { "Ref": "InstanceProfile" }
          },
          "ImageId": { "Ref": "AmiId" },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyName": { "Ref": "KeyName" },
          "InstanceMarketOptions": {
            "Fn::If": [ "UseSpotPrice",
              {
                "MarketType": "spot",
                "SpotOptions": { "MaxPrice": { "Ref": "SpotPrice" } }
              },
              { "Ref": "AWS::NoValue" }
            ]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [ "",
                [
                  "#!/bin/bash -xe\n",
                  "# Install the files and packages from the metadata\n",
                  "\n",
                  "# Make sure we call cfn-signal before exiting, otherwise we have to\n",
                  "# wait for the CreationPolicy timeout to detect failed initialization.\n",
                  "# That's because of using the bash -e option, which makes the script\n",
                  "# exit immediately as soon as any command, e.g. cfn-init, fails.\n",
                  "\n",
                  "onexit() {\n",
                  "  # Save exit code for call to cfn-signal below.\n",
                  "  exit_code=$?\n",
                  "\n",
                  "  # Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "  set +o errexit\n",
                  "\n",
                  "  # Set LastHealth tag so cloud list command shows progress.\n",
                  "  if [ \"$exit_code\" == 0 ]; then\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataSuccess\n",
                  "    /sbin/service monit start\n",
                  "  else\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataFailure\n",
                  "    # Upload logs before reporting failure to avoid race against termination.\n",
                  "    ACCOUNT='", { "Ref": "Environment" }, "'\n",
                  "    BRANCH='", { "Ref": "Branch" }, "'\n",
                  "    DEPLOYMENT_NAME='", { "Ref": "XgemailServiceTypePub" }, "'\n",
                  "    /opt/sophos/bin/upload_deployment_logs.py -a ${ACCOUNT} -b ${BRANCH} ${DEPLOYMENT_NAME} -c netstat_tuna.out='netstat -tuna'\n",
                  "  fi\n",
                  "\n",
                  "  /opt/aws/bin/cfn-signal -e $exit_code",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingGroupPub",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "}\n",
                  "\n",

                  "trap onexit EXIT\n",
                  "\n",

                  "# Wait for network access.\n",
                  "/usr/bin/nc -v -z -w 60 www.google.com 80\n",
                  "\n",

                  "# Set LastHealth tag so cloud list command shows progress.\n",
                  "/opt/sophos/bin/set_instance_tag.py LastHealth UserDataStarted\n",
                  "\n",

                  "/opt/aws/bin/cfn-init --verbose ",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingLaunchTemplatePub ",
                  " --configsets xgemail_install ",
                  " --region ", { "Ref": "AWS::Region" }, "\n",
                  "\n",

                  "# Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "# This is NOT redundant with the call to disable errexit inside onexit,\n",
                  "# because an error that happens earlier than this point will be trapped\n",
                  "# and generate a call to onexit before this code is reached.\n",
                  "set +o errexit\n",
                  "\n",

                  "# Now the onexit function will get called.\n"
                ]
              ]
            }
          }
        }
      }
    }
  },

  "Outputs": {
    "AmiId": {
      "Description": "ID of the Ami we are using",
      "Value": { "Ref" : "AmiId" }
    },
    "AutoScalingGroup": {
      "Description": "Auto Scaling Group Name.",
      "Value": { "Ref": "XgemailAutoScalingGroup" }
    },
    "AutoScalingGroupPub": {
      "Description": "Auto Scaling Group Name.",
      "Value": { "Ref": "XgemailAutoScalingGroupPub" }
    },
    "Branch": {
      "Description": "Branch we are using so we know for things like ansible",
      "Value": { "Ref": "Branch" }
    },
    "BuildVersion": {
      "Description": "Version of the application from Bamboo",
      "Value": { "Ref": "BuildVersion" }
    },
    "LaunchTemplate": {
      "Description": "Auto Scaling Launch Template Name.",
      "Value": { "Ref": "XgemailAutoScalingLaunchTemplate" }
    },
    "LaunchTemplatePub": {
      "Description": "Auto Scaling Launch Template Name.",
      "Value": { "Ref": "XgemailAutoScalingLaunchTemplatePub" }
    }
  }
}
