{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Sophos Email AutoScaling Group template for Sophos Cloud used for customer-submit EC2 Instances.",

  "Metadata": {
    "Copyright": [
      "Copyright 2021, Sophos Limited. All rights reserved.",
      "",
      "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
      "Sophos Limited and Sophos Group.  All other product and company",
      "names mentioned are trademarks or registered trademarks of their",
      "respective owners."
    ],

    "Comments": [
      "Sophos Email AutoScaling Group template for Sophos Cloud used for customer-submit EC2 Instances."
    ]
  },

  "Parameters": {
    "AesDecryptionKey": {
      "Description": "Decryption key for encrypted buckets",
      "Type": "String"
    },
    "AlarmTopicArn": {
      "Description": "ARN for SNS Topic that should receive alarm notifications",
      "Type": "String"
    },
    "AmiId": {
      "Description": "AMI ID to use as a base for the stack",
      "Type": "String"
    },
    "AutoScalingInstanceRoleArn": {
      "Description": "Arn of the AutoScaling Role.",
      "Type": "String"
    },
    "AutoScalingMinSize": {
      "Description": "Minimum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "3"
    },
    "AutoScalingMaxSize": {
      "Description": "Maximum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "12"
    },
    "AutoScalingNotificationTopicARN": {
      "Description": "ARN for SNS Topic that should receive launch and termination notifications",
      "Type": "String"
    },
    "AvailabilityZones": {
      "Type": "List<String>",
      "Description": "List of Availability Zones with Public and Private Subnets",
      "ConstraintDescription": "must be a comma-separated list of valid Availability Zones for the selected VPC"
    },
    "Branch": {
      "Description": "(Develop, XGE-XXX, etc...)",
      "Type": "String"
    },
    "BuildVersion": {
      "Description": "Version of the application from Bamboo",
      "Type": "String",
      "Default": "1.0"
    },
    "BundleVersion": {
      "Description": "Version of the AMI bundle",
      "Type": "Number"
    },
    "DeliveryDirectorBucketName": {
      "Description": "Name of the delivery director bucket",
      "Type": "String"
    },
    "DeployIgnoreUnmodifiedGroupSize": {
      "Description": "During a stack update, indicates whether AWS CloudFormation ignores any group size property differences between your current Auto Scaling group and the Auto Scaling group that is described in the update.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [ "true", "false" ]
    },
    "DeployMaxBatchSize": {
      "Description": "The maximum number of instances that are terminated at a given time.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "DeployMinInstancesInService": {
      "Description": "The minimum number of instances that must be in service within the autoscaling group while obsolete instances are being terminated.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "DeployTimeout": {
      "Description": "The amount of time to wait until the Auto Scaling group receives the required number of valid signals.",
      "Type": "String",
      "Default": "PT1H"
    },
    "EbsVolumeType": {
      "Description": "Indicates the EBS volume type.",
      "Type": "String",
      "Default": "gp3",
      "AllowedValues": [ "gp2", "gp3", "standard" ]
    },
    "Environment": {
      "Description": "(dev2, dev3, dev4, dev5, qa, etc...)",
      "Type": "String"
    },
    "HealthCheckGracePeriod": {
      "Description": "The seconds after an instance comes into service that health checks starts.",
      "Type": "Number"
    },
    "InstanceProfile": {
      "Description": "Instance profile for accessing aws resources",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "c3.large"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Key pair used to SSH to the instance"
    },
    "LifecycleHookTerminating": {
      "Description": "Name of the Lifecycle Hook.",
      "Type": "String"
    },
    "LoadBalancerName": {
      "Description": "Name for the ELB to attach to the Auto Scaling Group",
      "Type": "String"
    },
    "MsgHistoryV2BucketName" : {
      "Description" : "Message History s3 bucket name for writing failure records",
      "Type": "String"
    },
    "MsgHistoryV2StreamName" : {
      "Description" : "Message History firehose stream name",
      "Type": "String"
    },
    "NewRelicEnabled": {
      "Description": "Enable New Relic Infrastructure Monitoring",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [ "true", "false" ]
    },
    "PolicyTargetValue": {
      "Description": "The target value for the metric.",
      "Type": "Number",
      "Default": "50"
    },
    "S3CookbookRepositoryURL": {
      "Description": "The absolute S3 path to the cookbooks tar/zip used to install the application.",
      "Type": "String",
      "Default": "//cloud-applications/develop/cookbooks.enc"
    },
    "ScheduledASOffHourDesiredCapacity": {
      "Description": "DesiredCapacity of instances in the Auto Scaling Group outside of business hour.",
      "Type": "String",
      "Default": "2"
    },
    "ScheduledASOnHourDesiredCapacity": {
      "Description": "DesiredCapacity of instances in the Auto Scaling Group inside of business hour.",
      "Type": "String",
      "Default": "3"
    },
    "SecurityGroups": {
      "Description": "The security group that allows communication within the VPC.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SpotPrice": {
      "Description": "Spot price",
      "Type": "String",
      "Default": "-1"
    },
    "StationVpcId" : {
      "Description" : "Cloud Station VPC id ",
      "Type" : "String",
      "Default": ""
    },
    "StationVpcName": {
      "Description": "Name of the CloudStation VPC",
      "Type": "String",
      "Default": "CloudStation"
    },
    "Vpc": {
      "Description": "ID of an existing VPC",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcName": {
      "Description": "Name of an existing VPC",
      "Type": "String",
      "Default": "CloudStation"
    },
    "VpcZoneIdentifiers": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Public Subnets for your VPC",
      "ConstraintDescription": "must be a comma-separated list of valid Public Subnets for the selected VPC"
    },
    "XgemailBucketName": {
      "Description": "Name of the S3 Bucket where XGEMAIL messages are sent",
      "Type": "String"
    },
    "XgemailMinSizeDataGB": {
      "Description": "Total GB to reserve for storing data files",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "16384"
    },
    "XgemailMsgHistoryBucketName": {
      "Description": "Name of the S3 Bucket where XGEMAIL messages are sent",
      "Type": "String",
      "Default": ""
    },
    "XgemailMsgHistoryMsBucketName": {
      "Description": "Name of the S3 Bucket where XGEMAIL messages are sent for micro-service",
      "Type": "String",
      "Default": ""
    },
    "XgemailMsgHistoryQueueUrl": {
      "Description": "URL for the SQS Queue where XGEMAIL messages are sent",
      "Type": "String",
      "Default": ""
    },
    "XgemailPolicyArn" : {
      "Description" : "ARN for the SNS Topic where XGEMAIL policies are sent",
      "Type" : "String",
      "Default": ""
    },
    "XgemailPolicyBucketName" : {
      "Description" : "Name of the S3 Bucket where XGEMAIL policy docs are stored",
      "Type" : "String",
      "Default": ""
    },
    "XgemailPolicyEfsFileSystemId" : {
      "Description": "The id of the EFS file system used to store policy",
      "Type" : "String",
      "Default": ""
    },
    "XgemailPostfixQueueEfsFileSystemId" : {
      "Description": "The id of the EFS file system used to store offline postfix queues",
      "Type" : "String",
      "Default": ""
    },
    "XgemailQueueUrl": {
      "Description": "URL for the SQS Queue where XGEMAIL messages are sent",
      "Type": "String",
      "Default": ""
    },
    "XgemailScanEventsTopicArn": {
      "Description": "Arn of scan events",
      "Type": "String"
    },
    "MessageHistoryEventsTopicArn": {
      "Description": "Arn of message history events",
      "Type": "String"
    },
    "XgemailServiceType": {
      "Description": "Service type for the xgemail instance (Defaults to unknown so not to break builds)",
      "Type": "String",
      "Default": "unknown"
    },
    "XgemailSxlDbl": {
      "Description": "SXL Domain Blacklist used by Xgemail Submit Servers",
      "Type": "String"
    },
    "XgemailSxlRbl": {
      "Description": "SXL Reputation Blacklist used by Xgemail Submit Servers",
      "Type": "String"
    }
  },

  "Mappings": {
    "RegionConfigMap": {
      "ap-northeast-1": {
        "Name": "Asia Pacific (Tokyo)",
        "PrivateDns": "ap-northeast-1.compute.internal"
      },
      "ap-southeast-1": {
        "Name": "Asia Pacific (Singapore)",
        "PrivateDns": "ap-southeast-1.compute.internal"
      },
      "ap-southeast-2": {
        "Name": "Asia Pacific (Sydney)",
        "PrivateDns": "ap-southeast-2.compute.internal"
      },
      "eu-central-1": {
        "Name": "EU (Frankfurt)",
        "PrivateDns": "eu-central-1.compute.internal"
      },
      "eu-west-1": {
        "Name": "EU (Ireland)",
        "PrivateDns": "eu-west-1.compute.internal"
      },
      "us-east-1": {
        "Name": "US East (N. Virginia)",
        "PrivateDns": "ec2.internal"
      },
      "us-east-2": {
        "Name": "US East (Ohio)",
        "PrivateDns": "us-east-2.compute.internal"
      },
      "us-west-1": {
        "Name": "US West (N. California)",
        "PrivateDns": "us-west-1.compute.internal"
      },
      "us-west-2": {
        "Name": "US West (Oregon)",
        "PrivateDns": "us-west-2.compute.internal"
      },
      "sa-east-1": {
        "Name": "South America (Sao Paulo)",
        "PrivateDns": "sa-east-1.compute.internal"
      }
    }
  },

  "Conditions": {
    "IsProd": {
      "Fn::Equals": [ { "Ref": "Environment" }, "prod" ]
    },
    "PreProd": {
      "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Environment" }, "prod" ] } ]
    },
    "UseSpotPrice": {
      "Fn::And": [
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Environment" },  "prod" ] } ] },
        { "Fn::Not": [ { "Fn::Equals": [ {"Ref": "SpotPrice"},  "-1" ] } ] }
      ]
    },
    "IsInfDevelopmentEnvironment": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "Environment" }, "inf" ] },
        { "Fn::Equals": [ { "Ref": "Environment" }, "qainf" ] },
        { "Fn::Equals": [ { "Ref": "Environment" },  "dev" ] }
      ]
    }
  },

  "Resources": {
    "XgemailAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Ref": "AvailabilityZones" },
        "Cooldown": "200",
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": "ELB",
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref":"XgemailAutoScalingLaunchTemplate" },
          "Version": {"Fn::GetAtt": ["XgemailAutoScalingLaunchTemplate", "LatestVersionNumber"]}
        },
        "LifecycleHookSpecificationList" : [
          {
            "LifecycleHookName": { "Ref": "LifecycleHookTerminating" },
            "HeartbeatTimeout" : "300",
            "LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
            "NotificationTargetARN" : { "Ref": "AutoScalingNotificationTopicARN" },
            "RoleARN" : { "Ref": "AutoScalingInstanceRoleArn" }
          }
        ],
        "LoadBalancerNames": [ { "Ref": "LoadBalancerName" } ],
        "MinSize": { "Ref": "AutoScalingMinSize" },
        "MaxSize": { "Ref": "AutoScalingMaxSize" },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "TerminationPolicies": [ "Default" ],
        "VPCZoneIdentifier": { "Ref": "VpcZoneIdentifiers" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join":  [":",
                [
                  { "Ref": "VpcName"},
                  { "Ref": "XgemailServiceType" },
                  { "Ref": "Branch" },
                  { "Ref": "BundleVersion" }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BuildResultKey",
            "Value": { "Ref": "BuildVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BundleVersion",
            "Value": { "Ref": "BundleVersion" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Application",
            "Value": { "Ref": "XgemailServiceType" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BaseAmi",
            "Value": { "Ref": "AmiId" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BusinessUnit",
            "Value": "MSG",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "OwnerEmail",
            "Value": "sophosmailops@sophos.com",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Project",
            "Value": "xgemail",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceCategory",
            "Value": { "Fn::Sub": "${VpcName}:email" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceType",
            "Value": { "Fn::Sub": "${VpcName}:${XgemailServiceType}" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "sxl-revision",
            "Value": "a",
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "AutoScalingMinSize" },
          "Timeout": { "Ref": "DeployTimeout" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": { "Ref": "DeployMaxBatchSize" },
          "MinInstancesInService": { "Fn::If": ["PreProd", "0", { "Ref": "DeployMinInstancesInService" } ]},
          "MinSuccessfulInstancesPercent": "50",
          "PauseTime": { "Ref": "DeployTimeout" },
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": { "Ref": "DeployIgnoreUnmodifiedGroupSize" }
        }
      }
    },

    "XgemailPredictiveScalingPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "XgemailAutoScalingGroup" },
        "PolicyType":"PredictiveScaling",
        "PredictiveScalingConfiguration":{
          "MetricSpecifications":[
            {
              "TargetValue":55,
              "PredefinedMetricPairSpecification":{
                "PredefinedMetricType":"ASGCPUUtilization"
              }
            }
          ],
          "Mode":"ForecastAndScale",
          "MaxCapacityBreachBehavior": "IncreaseMaxCapacity",
          "MaxCapacityBuffer": 10,
          "SchedulingBufferTime": 600
        }
      }
    },

    "XgemailAutoScalePolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "XgemailAutoScalingGroup" },
        "PolicyType": "TargetTrackingScaling",
        "EstimatedInstanceWarmup": "600",
        "TargetTrackingConfiguration": {
          "PredefinedMetricSpecification":{
            "PredefinedMetricType":"ASGAverageCPUUtilization"
          },
          "TargetValue": { "Ref": "PolicyTargetValue"}
        }
      }
    },

    "XgemailAutoScalingLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "xgemail_install": [
              "install_volume",
              "attributes",
              "update_cookbooks",
              "xgemail_install",
              "tag_volume"
            ]
          },

          "install_volume": {
            "files": {
              "/mnt/add_volume.sh": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash\n",
                      "# Install the additional volume\n",
                      "echo '/dev/xvdi  /storage           ext4    defaults      0   0' >> /etc/fstab\n",
                      "echo 'updated /etc/fstab'\n",
                      "mkfs -t ext4 /dev/xvdi\n",
                      "echo 'created file system'\n",
                      "mkdir /storage\n",
                      "mount -a\n",
                      "echo 'mounted new file system'\n",
                      "echo 'completed add_volume'\n"
                    ]
                  ]
                },
                "mode": "000554",
                "owner": "root"
              }
            },
            "commands": {
              "01_run_script": { "command": "bash /mnt/add_volume.sh > /var/log/add_volume.log 2>&1" }
            }
          },

          "attributes": {
            "files": {
              "/var/sophos/cookbooks/attributes.json": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "{\n",
                      "  \"sophos_cloud\" : {\n",
                      "    \"application_name\"                       : \"{{cluster}}\",\n",
                      "    \"application_type\"                       : \"xgemail\",\n",
                      "    \"availability_zone\"                      : \"{{availability_zone}}\",\n",
                      "    \"connections\"                            : \"cloud-{{environment}}-connections\",\n",
                      "    \"configs\"                                : \"cloud-{{environment}}-configs\",\n",
                      "    \"context\"                                : \"{{environment}}\",\n",
                      "    \"environment\"                            : \"{{environment}}\",\n",
                      "    \"branch\"                                 : \"{{branch}}\",\n",
                      "    \"cluster\"                                : \"{{cluster}}\",\n",
                      "    \"client-endpoint\"                        : \"{{region}}\",\n",
                      "    \"region\"                                 : \"{{region}}\",\n",
                      "    \"vpc_id\"                                 : \"{{vpc_id}}\",\n",
                      "    \"vpc_name\"                               : \"{{vpc_name}}\"\n",
                      "  },\n",
                      "  \"cert\" : {\n",
                      "    \"mx\"                                     : \"mx\",\n",
                      "    \"should_install_mx\"                      : \"true\"\n",
                      "  },\n",
                      "  \"newrelic\" : {\n",
                      "    \"enabled\"                                  : \"{{newrelic_enabled}}\"\n",
                      "  },\n",
                      "  \"xgemail\" : {\n",
                      "    \"alarm_topic_arn\"                        : \"{{alarm_topic_arn}}\",\n",
                      "    \"cluster_type\"                           : \"{{cluster_type}}\",\n",
                      "    \"delivery_director_bucket_name\"          : \"{{delivery_director_bucket_name}}\",\n",
                      "    \"lifecycle_topic_arn\"                    : \"{{lifecycle_topic_arn}}\",\n",
                      "    \"msg_history_bucket_name\"                : \"{{msg_history_bucket_name}}\",\n",
                      "    \"msg_history_ms_bucket_name\"             : \"{{msg_history_ms_bucket_name}}\",\n",
                      "    \"msg_history_queue_url\"                  : \"{{msg_history_queue_url}}\",\n",
                      "    \"msg_history_v2_bucket_name\"             : \"{{msg_history_v2_bucket_name}}\",\n",
                      "    \"msg_history_v2_stream_name\"             : \"{{msg_history_v2_stream_name}}\",\n",
                      "    \"policy_efs_file_system_id\"              : \"{{policy_efs_file_system_id}}\",\n",
                      "    \"postfix_queue_efs_file_system_id\"       : \"{{postfix_queue_efs_file_system_id}}\",\n",
                      "    \"station_vpc_id\"                         : \"{{station_vpc_id}}\",\n",
                      "    \"station_vpc_name\"                       : \"{{station_vpc_name}}\",\n",
                      "    \"sxl_dbl\"                                : \"{{sxl_dbl}}\",\n",
                      "    \"sxl_rbl\"                                : \"{{sxl_rbl}}\",\n",
                      "    \"xgemail_policy_bucket_name\"             : \"{{xgemail_policy_bucket_name}}\",\n",
                      "    \"xgemail_bucket_name\"                    : \"{{xgemail_bucket_name}}\",\n",
                      "    \"xgemail_policy_arn\"                     : \"{{xgemail_policy_arn}}\",\n",
                      "    \"xgemail_queue_url\"                      : \"{{xgemail_queue_url}}\",\n",
                      "    \"xgemail_scan_events_topic_arn\"          : \"{{xgemail_scan_events_topic_arn}}\",\n",
                      "    \"xgemail_msg_history_events_topic_arn\"   : \"{{xgemail_msg_history_events_topic_arn}}\"\n",
                      "  }\n",
                      "}\n"
                    ]
                  ]
                },
                "context": {
                  "alarm_topic_arn":                                   { "Ref": "AlarmTopicArn" },
                  "availability_zone":                                 { "Ref": "AvailabilityZones" },
                  "branch":                                            { "Ref": "Branch" },
                  "cluster":                                           { "Ref": "XgemailServiceType" },
                  "cluster_type":                                      { "Ref": "XgemailServiceType" },
                  "delivery_director_bucket_name":                     { "Ref": "DeliveryDirectorBucketName" },
                  "environment":                                       { "Ref": "Environment" },
                  "lifecycle_topic_arn":                               { "Ref": "AutoScalingNotificationTopicARN" },
                  "msg_history_bucket_name":                           { "Ref": "XgemailMsgHistoryBucketName" },
                  "msg_history_ms_bucket_name":                        { "Ref": "XgemailMsgHistoryMsBucketName" },
                  "msg_history_queue_url":                             { "Ref": "XgemailMsgHistoryQueueUrl" },
                  "msg_history_v2_bucket_name":                        { "Ref": "MsgHistoryV2BucketName" },
                  "msg_history_v2_stream_name":                        { "Ref": "MsgHistoryV2StreamName" },
                  "newrelic_enabled":                                  { "Ref": "NewRelicEnabled" },
                  "policy_efs_file_system_id":                         { "Ref": "XgemailPolicyEfsFileSystemId" },
                  "postfix_queue_efs_file_system_id":                  { "Ref": "XgemailPostfixQueueEfsFileSystemId" },
                  "region":                                            { "Ref": "AWS::Region" },
                  "stack":                                             { "Ref": "AWS::StackName" },
                  "station_vpc_id":                                    { "Ref": "StationVpcId" },
                  "station_vpc_name":                                  { "Ref": "StationVpcName" },
                  "sxl_dbl":                                           { "Ref": "XgemailSxlDbl" },
                  "sxl_rbl":                                           { "Ref": "XgemailSxlRbl" },
                  "vpc_id":                                            { "Ref": "Vpc" },
                  "vpc_name":                                          { "Ref": "VpcName" },
                  "xgemail_bucket_name":                               { "Ref": "XgemailBucketName" },
                  "xgemail_policy_arn":                                { "Ref": "XgemailPolicyArn" },
                  "xgemail_policy_bucket_name":                        { "Ref": "XgemailPolicyBucketName" },
                  "xgemail_queue_url":                                 { "Ref": "XgemailQueueUrl" },
                  "xgemail_scan_events_topic_arn":                     { "Ref": "XgemailScanEventsTopicArn" },
                  "xgemail_msg_history_events_topic_arn":              { "Ref": "MessageHistoryEventsTopicArn" }
                },
                "mode": "000444",
                "owner": "root"
              }
            }
          },

          "update_cookbooks": {
            "commands": {
              "00_clean": {
                "command": {
                  "Fn::Join": [ "; ",
                    [
                      "rm -f /var/chef/chef-repo/nodes/*.*",
                      "rm -f /var/chef/chef-repo/cookbooks.enc",
                      "rm -f /var/chef/chef-repo/cookbooks.tar.gz",
                      "rm -rf /var/chef/chef-repo/cookbooks"
                    ]
                  ]
                }
              },
              "01_get_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "aws s3 cp s3:", { "Ref": "S3CookbookRepositoryURL" }, " /var/chef/chef-repo/cookbooks.enc"
                    ]
                  ]
                },
                "cwd": "/var/chef",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "02_decrypt_cookbook": {
                "command": {
                  "Fn::Join": [ "",
                    [
                      "openssl enc -aes-256-cbc -d -in /var/chef/chef-repo/cookbooks.enc -out /var/chef/chef-repo/cookbooks.tar.gz -pass pass:", { "Ref": "AesDecryptionKey" }
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "03_unpack_cookbook": {
                "command": "tar xvf /var/chef/chef-repo/cookbooks.tar.gz",
                "cwd": "/var/chef/chef-repo"
              }
            }
          },

          "xgemail_install": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "[main]\n",
                      "stack=", { "Ref": "AWS::StackName" }, "\n",
                      "region=", { "Ref": "AWS::Region" }, "\n",
                      "interval=1\n"
                    ]
                  ]
                }
              },
              "/var/sophos/modify_network_config": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "export private_ip=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                      "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/local-hostname`\n",
                      "export host_entry=\"$private_ip $host_name\"\n",
                      "echo $host_entry\n",
                      "echo > /etc/hosts\n",
                      "echo 127.0.0.1 $host_name localhost >> /etc/hosts\n",
                      "echo $host_entry >> /etc/hosts\n",
                      "echo >> /etc/dhcp/dhclient.conf\n",
                      "echo 'supersede domain-name \"", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] } , "\";' >> /etc/dhcp/dhclient.conf\n",
                      "echo >> /etc/resolv.conf\n",
                      "echo 'search ", { "Fn::FindInMap": [ "RegionConfigMap", { "Ref": "AWS::Region" }, "PrivateDns" ] } , "' >> /etc/resolv.conf\n"
                    ]
                  ]
                },
                "mode": "000500",
                "owner": "root"
              }
            },
            "commands": {
              "01_delete_run_list_nodes": {
                "command": "rm -f /var/chef/chef-repo/nodes/*.*"
              },
              "02_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.chef.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "03_configure_node_run_list": {
                "command": {
                  "Fn::Join": ["",
                    [
                      "knife node run_list set -z `knife node list -z` \"",
                      "recipe[sophos-cloud-xgemail::setup_xgemail_instance_terminator],",
                      "recipe[sophos-cloud-xgemail::configure-policy-efs-mount],",
                      "recipe[sophos-cloud-ntpd::default],",
                      "recipe[sophos-cloud-fluentd::configure],",
                      "recipe[sophos-cloud-xgemail::deploy_certs],",
                      "recipe[sophos-cloud-xgemail::setup_xgemail_utils_structure],",
                      "recipe[sophos-cloud-xgemail::configure-postfix],",
                      "recipe[sophos-cloud-xgemail::configure_monit],",
                      "recipe[sophos-cloud-newrelic::configure_newrelic_infra],",
                      "recipe[sophos-cloud-xgemail::run_install_cleanup]",
                      "\""
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "04_modify_network_config": {
                "command": "/var/sophos/modify_network_config"
              },
              "05_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ",
                    [
                      "chef-client --no-color -z",
                      "-c /var/chef/chef-repo/.chef/client.rb",
                      "-j /var/sophos/cookbooks/attributes.json",
                      "-l debug -L /var/log/chef-client.instance.install.service.log"
                    ]
                  ]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              }
            }
          },
          "tag_volume": {
            "files": {
              "/tmp/tag_volume.sh": {
                "content": {
                  "Fn::Join": [ "",
                    [
                      "#!/bin/bash\n",
                      "export AWS_AMI_ID='", { "Ref" : "AmiId" }, "'\n",
                      "export AWS_APPLICATION='", { "Ref": "XgemailServiceType" }, "'\n",
                      "export AWS_BRANCH='", { "Ref" : "Branch" }, "'\n",
                      "export AWS_BUILD_RESULT_KEY='", { "Ref" : "BuildVersion" }, "'\n",
                      "export AWS_BUNDLE_VERSION='", { "Ref" : "BundleVersion" }, "'\n",
                      "export AWS_INSTANCE_ID=$(curl -f http://169.254.169.254/latest/meta-data/instance-id)\n",
                      "export AWS_REGION='", { "Ref" : "AWS::Region" }, "'\n",
                      "export AWS_VPC_NAME='", { "Ref": "VpcName"} , "'\n",
                      "for i in $(aws ec2 describe-volumes --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query Volumes[*].VolumeId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n",
                      "for i in $(aws ec2 describe-network-interfaces --region $AWS_REGION --filters Name=attachment.instance-id,Values=$AWS_INSTANCE_ID --query NetworkInterfaces[0].NetworkInterfaceId --output text); do aws ec2 create-tags --resources $i --tags Key=Application,Value=\"$AWS_APPLICATION\" Key=BaseAmi,Value=\"$AWS_AMI_ID\" Key=BuildResultKey,Value=\"$AWS_BUILD_RESULT_KEY\" Key=BundleVersion,Value=\"$AWS_BUNDLE_VERSION\" Key=BusinessUnit,Value=MSG Key=Name,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION:$AWS_BRANCH:$AWS_BUNDLE_VERSION\" Key=OwnerEmail,Value=sophosmailops@sophos.com Key=Project,Value=xgemail Key=ServiceCategory,Value=\"$AWS_VPC_NAME:email\" Key=ServiceType,Value=\"$AWS_VPC_NAME:$AWS_APPLICATION\" --region $AWS_REGION; done \n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000755"
              }
            },
            "commands": {
              "01_run_script": { "command": "bash /tmp/tag_volume.sh" }
            }
          }
        }
      },
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdi",
              "Ebs": {
                "DeleteOnTermination": "true",
                "VolumeSize": { "Ref": "XgemailMinSizeDataGB" },
                "VolumeType": { "Ref": "EbsVolumeType" }
              }
            }
          ],
          "DisableApiTermination": { "Fn::If": [ "IsProd", "true", "false" ] },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "Groups": { "Ref": "SecurityGroups" }
            }
          ],
          "ImageId": { "Ref": "AmiId" },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyName": { "Ref": "KeyName" },
          "Monitoring": {
            "Enabled": { "Fn::If": ["IsProd", "true", "false"] }
          },
          "IamInstanceProfile": {
            "Name": { "Ref": "InstanceProfile" }
          },
          "InstanceMarketOptions": {
            "Fn::If": ["UseSpotPrice", {
              "MarketType": "spot",
              "SpotOptions": { "MaxPrice": { "Ref": "SpotPrice" } }
            },
              {"Ref": "AWS::NoValue"}]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [ "",
                [
                  "#!/bin/bash -xe\n",
                  "# Install the files and packages from the metadata\n",
                  "\n",
                  "# Force replacement of the LaunchConfiguration object by changing this value.\n",
                  "# ",
                  {
                    "Ref": "BuildVersion"
                  },
                  "\n",
                  "# Make sure we call cfn-signal before exiting, otherwise we have to\n",
                  "# wait for the CreationPolicy timeout to detect failed initialization.\n",
                  "# That's because of using the bash -e option, which makes the script\n",
                  "# exit immediately as soon as any command, e.g. cfn-init, fails.\n",
                  "\n",
                  "onexit() {\n",
                  "  # Save exit code for call to cfn-signal below.\n",
                  "  exit_code=$?\n",
                  "\n",
                  "  # Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "  set +o errexit\n",
                  "\n",
                  "  ACCOUNT='", { "Ref": "Environment" }, "'\n",
                  "  BRANCH='", { "Ref": "Branch" }, "'\n",
                  "  DEPLOYMENT_NAME='", { "Ref": "XgemailServiceType"}, "'\n",
                  "  # Set LastHealth tag so cloud list command shows progress.\n",
                  "  if [ \"$exit_code\" == 0 ]; then\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataSuccess\n",
                  "    if [ \"$ACCOUNT\" == \"prod\" ]; then\n",
                  "      /opt/sophos/bin/ebs-delete-on-termination.py\n",
                  "    fi\n",
                  "    /sbin/service monit start\n",
                  "  else\n",
                  "    /opt/sophos/bin/set_instance_tag.py LastHealth UserDataFailure\n",
                  "    # Upload logs before reporting failure to avoid race against termination.\n",
                  "    /opt/sophos/bin/upload_deployment_logs.py -a ${ACCOUNT} -b ${BRANCH} ${DEPLOYMENT_NAME} -c netstat_tuna.out='netstat -tuna'\n",
                  "  fi\n",
                  "\n",
                  "  /opt/aws/bin/cfn-signal -e $exit_code",
                  " --stack ", { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingGroup",
                  " --region ", { "Ref": "AWS::Region" },
                  "\n",
                  "}\n",
                  "\n",
                  "trap onexit EXIT\n",
                  "\n",
                  "# Wait for network access.\n",
                  "/usr/bin/nc -v -z -w 60 www.google.com 80\n",
                  "\n",
                  "# Set LastHealth tag so cloud list command shows progress.\n",
                  "/opt/sophos/bin/set_instance_tag.py LastHealth UserDataStarted\n",
                  "\n",
                  "/opt/aws/bin/cfn-init --verbose ",
                  " --stack ",  { "Ref": "AWS::StackName" },
                  " --resource XgemailAutoScalingLaunchTemplate ",
                  " --configsets xgemail_install ",
                  " --region ", { "Ref": "AWS::Region" },
                  "\n",
                  "\n",
                  "# Disable errexit so errors below don't prevent the call to cfn-signal.\n",
                  "# This is NOT redundant with the call to disable errexit inside onexit,\n",
                  "# because an error that happens earlier than this point will be trapped\n",
                  "# and generate a call to onexit before this code is reached.\n",
                  "set +o errexit\n",
                  "\n",
                  "# Now the onexit function will get called.\n"
                ]
              ]
            }
          }
        }
      }
    }
  },

  "Outputs": {
    "AmiId": {
      "Description": "ID of the Ami we are using",
      "Value": { "Ref" : "AmiId" }
    },
    "AutoScalingGroup": {
      "Description": "Auto Scaling Group Name.",
      "Value": { "Ref": "XgemailAutoScalingGroup" }
    },
    "Branch": {
      "Description": "Branch we are using so we know for things like ansible",
      "Value": { "Ref": "Branch" }
    },
    "BuildVersion": {
      "Description": "Version of the application from Bamboo",
      "Value": { "Ref": "BuildVersion" }
    },
    "LaunchTemplate": {
      "Description": "Auto Scaling Launch Template Name.",
      "Value": { "Ref": "XgemailAutoScalingLaunchTemplate" }
    }
  }
}
