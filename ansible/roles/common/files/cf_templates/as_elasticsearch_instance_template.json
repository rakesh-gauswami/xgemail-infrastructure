{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "ElasticSearch instance template, for XGEMAIL use only.",

    "Metadata": {
        "Copyright": [
            "Copyright 2018, Sophos Limited. All rights reserved.",
            "",
            "'Sophos' and 'Sophos Anti-Virus' are registered trademarks of",
            "Sophos Limited and Sophos Group.  All other product and company",
            "names mentioned are trademarks or registered trademarks of their",
            "respective owners."
        ],

        "Comments": [
            { "Ref": "Description" },
            ""
        ]
    },

  "Parameters": {
    "AesDecryptionKey": {
      "Description": "Decryption key for encrypted buckets",
      "Type": "String"
    },
    "AmiId": {
      "Description": "AMI ID to use as a base for the stack",
      "Type": "String"
    },
    "AutoScalingMinSize": {
      "Description": "Minimum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "3"
    },
    "AutoScalingMaxSize": {
      "Description": "Maximum number of instances in the Auto Scaling Group",
      "Type": "String",
      "Default": "12"
    },
    "AutoScalingNotificationTopicARN": {
      "Description": "ARN for SNS Topic that should receive launch and termination notifications",
      "Type": "String"
    },
    "AvailabilityZoneIndex": {
      "Description": "Zero-based index for selecting availability zone (0=a, 1=b, etc.)",
      "Type": "String",
      "AllowedPattern": "^[0-9]$"
    },
    "AvailabilityZones": {
      "Type": "List<String>",
      "Description": "List of Availability Zones with Public and Private Subnets",
      "ConstraintDescription": "must be a comma-separated list of valid Availability Zones for the selected VPC"
    },
    "BastionSecurityGroup": {
      "Description": "Default security group for Bastion Hosts",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "Branch": {
      "Description": "(Develop, CPLAT-XXXX, etc...)",
      "Type": "String"
    },
    "BuildVersion": {
      "Description": "Version of the application from Bamboo",
      "Type": "String",
      "Default": "1.0"
    },
    "BundleVersion": {
      "Description": "Version of the AMI bundle",
      "Type": "Number"
    },
    "DeployIgnoreUnmodifiedGroupSize": {
      "Description": "During a stack update, indicates whether AWS CloudFormation ignores any group size property differences between your current Auto Scaling group and the Auto Scaling group that is described in the update.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [ "true", "false" ]
    },
    "DeployMaxBatchSize": {
      "Description": "The maximum number of instances that are terminated at a given time.",
      "Type": "Number",
      "Default": "1"
    },
    "DeployMinInstancesInService": {
      "Description": "The minimum number of instances that must be in service within the autoscaling group while obsolete instances are being terminated.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "DeployPauseTime": {
      "Description": "The amount of time to wait until the Auto Scaling group receives the required number of valid signals.",
      "Type": "String",
      "Default": "PT10M"
    },
    "DeploySuspendProcesses": {
      "Description": "The Auto Scaling processes to suspend during a stack update.",
      "Type": "List<String>",
      "Default": "HealthCheck,ReplaceUnhealthy,ScheduledActions",
      "AllowedPattern": "AddToLoadBalancer|AlarmNotification|AZRebalance|HealthCheck|ReplaceUnhealthy|ScheduledActions",
      "ConstraintDescription": "cannot suspend Launch or Terminate as these are needed for Rolling Updates."
    },
    "DeployWaitOnResourceSignals": {
      "Description": "Indicates whether the Auto Scaling group waits on signals during an update.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [ "true", "false" ]
    },
    "EbsMinIops": {
      "Description": "Total IOPS to reserve",
      "Type": "Number",
      "Default": "0",
      "MinValue": "0",
      "MaxValue": "4000"
    },
    "ElasticSearchDataDir": {
      "Description" : "The Directory where ElasticSearch will store index data.",
      "Type": "String"
    },
    "ElasticSearchDiscoveryTagKey": {
      "Description" : "The EC2 Discovery Tag Key.",
      "Type": "String"
    },
    "ElasticSearchDiscoveryTagVal": {
      "Description" : "The EC2 Discovery Tag Value.",
      "Type": "String"
    },
    "ElasticSearchHeapPercentage": {
      "Description" : "The % of total memory to use for heap allocation.",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "100",
      "Default": "60"
    },
    "ElasticSearchIsClientNode": {
      "Description": "Flag to set ElasticSearch Client Role.",
      "Type": "String",
      "AllowedValues": [ "true", "false" ]
    },
    "ElasticSearchIsDataNode": {
      "Description": "Flag to set ElasticSearch Data Role.",
      "Type": "String",
      "AllowedValues": [ "true", "false" ]
    },
    "ElasticSearchIsMasterNode": {
      "Description": "Flag to set ElasticSearch Master Role.",
      "Type": "String",
      "AllowedValues": [ "true", "false" ]
    },
    "ElasticSearchMinMasterNodes": {
      "Description": "The minimum number of master nodes to have in the cluster.",
      "Type": "Number",
      "MinValue": "1",
      "Default": "1"
    },
    "ElasticSearchMinSizeDataGB": {
      "Description": "Total GB to reserve for storing data files.",
      "Type": "Number",
      "MinValue": "1",
      "Default": "10",
      "MaxValue": "16384"
    },
    "ElasticSearchVolumeCount": {
      "Description": "Indicates the number of EBS volumes to be spun up",
      "Type": "Number",
      "Default": "1"
    },
    "ElasticSearchVolumeType": {
      "Type": "String",
      "Description": "The type of block store volume to use",
      "Default": "gp2",
      "AllowedValues": [ "gp2", "io1" ]
    },
    "Environment": {
      "Description": "(dev2, dev3, dev4, dev5, qa, etc...)",
      "Type": "String"
    },
    "HealthCheckGracePeriod": {
      "Description": "The seconds after an instance comes into service that health checks starts.",
      "Type": "Number",
      "Default": "120",
      "MinValue": "60",
      "MaxValue": "600"
    },
    "IamInstanceProfile": {
      "Description": "Instance profile for accessing aws resources",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.large"
    },
    "JavaServiceType": {
      "Description": "Service type for the java instance (Defaults to unknown so not to break builds)",
      "Type": "String",
      "Default" : "unknown"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Key pair used to SSH to the instance"
    },
    "LoadBalancerName": {
      "Description": "Name for the ELB to attach to the Auto Scaling Group",
      "Type": "List<String>",
      "Default": "AWS::NoValue"
    },
    "LogGroupRetentionPeriod": {
      "Description": "The length of time (in days) to retain logs for",
      "Type": "Number",
      "AllowedValues": [ "1", "3", "5", "7", "14", "30", "60", "90", "120", "150", "180", "365", "400", "545", "731", "1827", "3653" ],
      "Default": "400"
    },
    "LoggingSeverityLevel" : {
      "Description": "[default|skip|alert|warn|debug|info|notice|error|critical|emerg]",
      "Type": "String",
      "Default": "default",
      "AllowedValues" : [ "default", "skip", "alert","warn","debug","info","notice","error","critical","emerg" ]
    },
    "PublicIpAddressEnabled": {
      "Description": "Whether or not we have a public IP address",
      "Type": "String",
      "Default" : "false",
      "AllowedValues" : [ "false", "true" ]
    },
    "ScaleDownOnWeekends": {
      "Description": "Enable scale down to zero on Saturday at midnight and scale back on Monday morning. (Times are UTC, NON PROD/QA ENVIRONMENT ONLY)",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [ "true", "false" ]
    },
    "ScaleDownCron": {
      "Description": "Cron string for when to begin scale down.",
      "Type": "String",
      "Default": "0 1 * * 6"
    },
    "ScaleUpCron": {
      "Description": "Cron string for when to begin scale up.",
      "Type": "String",
      "Default": "0 4 * * 1"
    },
    "SecurityGroups": {
      "Description": "The security group that allows communication within the VPC.",
      "Type" : "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SpotPrice": {
      "Description": "Spot price",
      "Type": "String",
      "Default": "-1"
    },
    "UpdateInterval" : {
      "Description" : "The interval in minutes cfn-hup watches stack modifications.",
      "Type" : "Number",
      "Default" : "1",
      "MinValue" : "1",
      "MaxValue" : "30"
    },
    "VolumeSetId": {
      "Description": "Identifier to be combined with stack name and availability zone to associate volumes with an instance",
      "Type": "String",
      "Default": ""
    },
    "VolumeTrackerSimpleDbDomain": {
      "Description": "Name of Simple DB Domain used to track persistent EBS volumes",
      "Type": "String"
    },
    "Vpc": {
      "Description": "ID of an existing VPC",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcName": {
      "Description": "Name of an existing VPC",
      "Type": "String",
      "Default": "CloudStation"
    },
    "VpcZoneIdentifiers": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of Public Subnets for your VPC",
      "ConstraintDescription": "must be a comma-separated list of valid Public Subnets for the selected VPC"
    }
  },

  "Mappings": {
    "RegionConfigMap": {
      "ap-northeast-1": {
        "Name": "Asia Pacific (Tokyo)",
        "PrivateDns": "ap-northeast-1.compute.internal"
      },
      "ap-southeast-1": {
        "Name": "Asia Pacific (Singapore)",
        "PrivateDns": "ap-southeast-1.compute.internal"
      },
      "ap-southeast-2": {
        "Name": "Asia Pacific (Sydney)",
        "PrivateDns": "ap-southeast-2.compute.internal"
      },
      "eu-central-1": {
        "Name": "EU (Frankfurt)",
        "PrivateDns": "eu-central-1.compute.internal"
      },
      "eu-west-1": {
        "Name": "EU (Ireland)",
        "PrivateDns": "eu-west-1.compute.internal"
      },
      "us-east-1": {
        "Name": "US East (N. Virginia)",
        "PrivateDns": "ec2.internal"
      },
      "us-east-2": {
        "Name": "US East (Ohio)",
        "PrivateDns": "us-east-2.compute.internal"
      },
      "us-west-1": {
        "Name": "US West (N. California)",
        "PrivateDns": "us-west-1.compute.internal"
      },
      "us-west-2": {
        "Name": "US West (Oregon)",
        "PrivateDns": "us-west-2.compute.internal"
      },
      "sa-east-1": {
        "Name": "South America (Sao Paulo)",
        "PrivateDns": "sa-east-1.compute.internal"
      }
    }
  },

  "Conditions": {
    "EnableDetailedMonitoring": {
        "Fn::Equals": [
            {
                "Ref": "Environment"
            },
            "prod"
        ]
    },
    "UseSpotPrice": {
        "Fn::And": [
            {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "Environment"
                            },
                            "prod"
                        ]
                    }
                ]
            },
            {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {"Ref": "SpotPrice"},
                            "-1"
                        ]
                    }
                ]
            }
        ]
    },
    "EnableScaleDownOnWeekends": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {"Ref": "Environment"},
                    "prod"
                  ]
                },
                {
                  "Fn::Equals": [
                    {"Ref": "Environment"},
                    "qa"
                  ]
                }
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {"Ref": "ScaleDownOnWeekends"},
            "true"
          ]
        }
      ]
    },
    "IsInfDevelopmentEnvironment" : {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {"Ref": "Environment"},
            "inf"
          ]
        },
        {
          "Fn::Equals": [
            {"Ref": "Environment"},
            "qainf"
          ]
        },
        {
          "Fn::Equals": [
            {"Ref": "Environment"},
            "dev"
          ]
        }
      ]
    },
    "UseLoadBalancer" : {
      "Fn::Equals": [
        { "Ref": "ElasticSearchIsClientNode" },
        "true"
      ]
    },
    "IsMasterNode": {
      "Fn::Equals": [
        { "Ref": "ElasticSearchIsMasterNode" },
        "true"
      ]
    },
    "IsClientNode": {
      "Fn::Equals": [
        { "Ref": "ElasticSearchIsClientNode" },
        "true"
      ]
    },
    "IsDataNode": {
      "Fn::Equals": [
        { "Ref": "ElasticSearchIsDataNode" },
        "true"
      ]
    }
  },

  "Resources": {

    "ElasticSearchAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          { "Fn::Select" : [
            { "Ref": "AvailabilityZoneIndex" },
            { "Ref": "AvailabilityZones" }
          ] }
        ],
        "Cooldown": "200",
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": {
          "Fn::If": [
            "UseLoadBalancer",
            "ELB",
            "EC2"
          ]
        },
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref":"ElasticSearchAutoScalingLaunchTemplate"
          },
          "Version": {"Fn::GetAtt": ["ElasticSearchAutoScalingLaunchTemplate", "DefaultVersionNumber"]}
        },
        "LoadBalancerNames": {
          "Fn::If": [
            "UseLoadBalancer",
            { "Ref": "LoadBalancerName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "MinSize": { "Ref": "AutoScalingMinSize"},
        "MaxSize": { "Ref": "AutoScalingMaxSize"},
        "NotificationConfiguration": {
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
            "autoscaling:TEST_NOTIFICATION"
          ],
          "TopicARN": { "Ref": "AutoScalingNotificationTopicARN" }
        },
        "VPCZoneIdentifier": [
          { "Fn::Select" : [
            { "Ref": "AvailabilityZoneIndex" },
            { "Ref": "VpcZoneIdentifiers" }
          ] }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join":  [":",[
                { "Ref": "VpcName"},
                { "Fn::Join": ["-",[
                  { "Ref": "JavaServiceType" },
                  {"Fn::If": [
                    "IsMasterNode",
                    "master",
                    { "Ref": "AWS::NoValue" }
                  ]},
                  {"Fn::If": [
                    "IsClientNode",
                    "client",
                    { "Ref": "AWS::NoValue" }
                  ]},
                  {"Fn::If": [
                    "IsDataNode",
                    "data",
                    { "Ref": "AWS::NoValue" }
                  ]}
                ]]},
                { "Ref": "Branch" },
                { "Ref": "Environment" }
              ]]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "BuildResultKey",
            "Value": { "Ref": "BuildVersion"},
            "PropagateAtLaunch": true
          },
          {
            "Key": "BundleVersion",
            "Value": { "Ref": "BundleVersion"},
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": "elasticsearch",
            "PropagateAtLaunch": true
          },
          {
            "Key": "BaseAmi",
            "Value": { "Ref": "AmiId" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "BusinessUnit",
            "Value": "MSG",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": "xgemail",
            "PropagateAtLaunch": true
          },
          {
            "Key": "OwnerEmail",
            "Value": "sophosmailops@sophos.com",
            "PropagateAtLaunch": true
          },
          {
            "Key": { "Ref": "ElasticSearchDiscoveryTagKey"},
            "Value": { "Ref": "ElasticSearchDiscoveryTagVal"},
            "PropagateAtLaunch": true
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "AutoScalingMinSize" },
          "Timeout": "PT20M"
        }
      }
    },

    "AutoScalingScheduledScaleDown": {
      "Type": "AWS::AutoScaling::ScheduledAction",
      "Condition": "EnableScaleDownOnWeekends",
      "Properties": {
        "AutoScalingGroupName": {"Ref": "ElasticSearchAutoScalingGroup"},
        "MinSize": 0,
        "Recurrence": {"Ref": "ScaleDownCron"}
      }
    },

    "AutoScalingScheduledScaleUp": {
      "Type": "AWS::AutoScaling::ScheduledAction",
      "Condition": "EnableScaleDownOnWeekends",
      "Properties": {
        "AutoScalingGroupName": {"Ref": "ElasticSearchAutoScalingGroup"},
        "MinSize": {"Ref": "AutoScalingMinSize"},
        "Recurrence": {"Ref": "ScaleUpCron"}
      }
    },

    "ElasticSearchScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "ElasticSearchAutoScalingGroup" },
        "Cooldown" : "900",
        "ScalingAdjustment" : "1"
      }
    },

    "ElasticSearchScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "ElasticSearchAutoScalingGroup" },
        "Cooldown" : "900",
        "ScalingAdjustment" : "-1"
      }
    },

    "DiskUtilizationAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if disk utilization > 80% for 5 minutes",
        "MetricName": "DiskSpaceUtilization",
        "Namespace": "System/Linux",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "80",
        "AlarmActions": [ { "Ref": "ElasticSearchScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ElasticSearchAutoScalingGroup" }
          },
          {
            "Name": "Filesystem",
            "Value": "/dev/xvdh"
          },
          {
            "Name": "MountPath",
            "Value": { "Ref": "ElasticSearchDataDir" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "DiskUtilizationAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if disk utilization < 60% for 5 minutes",
        "MetricName": "DiskSpaceUtilization",
        "Namespace": "System/Linux",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "60",
        "AlarmActions": [ { "Ref": "ElasticSearchScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ElasticSearchAutoScalingGroup" }
          },
          {
            "Name": "Filesystem",
            "Value": "/dev/xvdh"
          },
          {
            "Name": "MountPath",
            "Value": { "Ref": "ElasticSearchDataDir" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ElasticSearchAutoScalingLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "configure": [
              "attributes",
              "configure"
            ],
            "update":  [
              "attributes",
              "update"
            ]
          },

          "attributes": {
            "files": {
              "/var/sophos/cookbooks/attributes.json": {
                "content": {
                  "Fn::Join": [ "\n", [
                    "{",
                    "  \"sophos_cloud\" : {",
                    "    \"account\"                        : \"{{environment}}\",",
                    "    \"application_name\"               : \"{{cluster}}\",",
                    "    \"application_type\"               : \"xgemail\",",
                    "    \"availability_zone\"              : \"{{availability_zone}}\",",
                    "    \"branch\"                         : \"{{branch}}\",",
                    "    \"client-endpoint\"                : \"{{region}}\",",
                    "    \"cluster\"                        : \"{{cluster}}\",",
                    "    \"configs\"                        : \"cloud-{{environment}}-configs\",",
                    "    \"connections\"                    : \"cloud-{{environment}}-connections\",",
                    "    \"environment\"                    : \"{{environment}}\",",
                    "    \"instance_id\"                    : \"<<instance>>\",",
                    "    \"is_java_app\"                    : \"no\",",
                    "    \"region\"                         : \"{{region}}\",",
                    "    \"vpc_id\"                         : \"{{vpc_id}}\",",
                    "    \"vpc_name\"                       : \"{{vpc_name}}\"",
                    "  },",
                    "  \"volumes\" : {",
                    "    \"volume_min_iops\"                : \"{{volume_min_iops}}\",",
                    "    \"volume_min_size_data_gb\"        : \"{{volume_min_size_data_gb}}\",",
                    "    \"volume_mount_point\"             : \"storage\",",
                    "    \"volume_set_id\"                  : \"{{volume_set_id}}\",",
                    "    \"volume_snapshot_hour\"           : \"0\",",
                    "    \"volume_snapshot_weekday\"        : \"0\",",
                    "    \"volume_tracker_sdb_domain\"      : \"{{volume_tracker_sdb_domain}}\"",
                    "  },",
                    "  \"elasticsearch\" : {",
                    "    \"clustername\"                    : \"{{clustername}}\",",
                    "    \"data_dir\"                       : \"{{data_dir}}\",",
                    "    \"discovery_ec2_tag_key\"          : \"{{discovery_ec2_tag_key}}\",",
                    "    \"discovery_ec2_tag_val\"          : \"{{discovery_ec2_tag_val}}\",",
                    "    \"heap_percentage\"                : \"{{heap_percentage}}\",",
                    "    \"is_client_node\"                 : \"{{is_client_node}}\",",
                    "    \"is_data_node\"                   : \"{{is_data_node}}\",",
                    "    \"is_master_node\"                 : \"{{is_master_node}}\",",
                    "    \"minimum_master_nodes_quorum\"    : \"{{minimum_master_nodes_quorum}}\",",
                    "    \"volume_count\"                   : \"{{volume_count}}\",",
                    "    \"volume_size\"                    : \"{{volume_min_size_data_gb}}\",",
                    "    \"volume_type\"                    : \"{{volume_type}}\"",
                    "  },",
                    "  \"xgemail\" : {",
                    "    \"cluster_type\"                   : \"{{cluster}}\"",
                    "  }",
                    "}"
                  ]]
                },
                "context": {
                  "availability_zone":                        { "Fn::Select" : [
                                                                  { "Ref": "AvailabilityZoneIndex" },
                                                                  { "Ref": "AvailabilityZones" }
                                                              ] },
                  "branch":                                   { "Ref": "Branch" },
                  "cluster":                                  { "Ref": "JavaServiceType" },
                  "clustername":                              { "Fn::Join": [".",["quarantine.xgemail", {"Ref": "Environment"}, {"Ref": "AWS::Region"}, "sophos.cloud.com"]]},
                  "environment":                              { "Ref": "Environment" },
                  "data_dir":                                 { "Ref": "ElasticSearchDataDir" },
                  "discovery_ec2_tag_key":                    { "Ref": "ElasticSearchDiscoveryTagKey" },
                  "discovery_ec2_tag_val":                    { "Ref": "ElasticSearchDiscoveryTagVal" },
                  "heap_percentage":                          { "Ref": "ElasticSearchHeapPercentage" },
                  "region":                                   { "Ref": "AWS::Region" },
                  "is_client_node":                           { "Ref": "ElasticSearchIsClientNode" },
                  "is_data_node":                             { "Ref": "ElasticSearchIsDataNode" },
                  "is_master_node":                           { "Ref": "ElasticSearchIsMasterNode" },
                  "minimum_master_nodes_quorum":              { "Ref": "ElasticSearchMinMasterNodes" },
                  "volume_count":                             { "Ref": "ElasticSearchVolumeCount" },
                  "volume_min_iops":                          { "Ref": "EbsMinIops" },
                  "volume_min_size_data_gb":                  { "Ref": "ElasticSearchMinSizeDataGB" },
                  "volume_set_id":                            { "Ref": "VolumeSetId" },
                  "volume_tracker_sdb_domain":                { "Ref": "VolumeTrackerSimpleDbDomain" },
                  "volume_type":                              { "Ref": "ElasticSearchVolumeType" },
                  "vpc_id":                                   { "Ref": "Vpc" },
                  "vpc_name":                                 { "Ref": "VpcName" }
                },
                "mode": "000444",
                "owner": "root"
              },
              "/var/sophos/modify_attributes_json": {
                "content": {
                  "Fn::Join": [ "", [
                    "#!/bin/bash -xe\n",
                    "export INSTANCE_ID=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`\n",
                    "sed -i \"s/<<instance>>/$INSTANCE_ID/g\" ./attributes.json"
                  ]]
                },
                "mode": "000500",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_modify_attributes_json": {
                "command": "/var/sophos/modify_attributes_json",
                "cwd": "/var/sophos/cookbooks"
              }
            }
          },

          "configure": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[main]\n",
                    "stack=", {
                      "Ref": "AWS::StackName"
                    }, "\n",
                    "region=", {
                      "Ref": "AWS::Region"
                    }, "\n",
                    "interval=", {
                      "Ref": "UpdateInterval"
                    }, "\n"
                  ]]
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.ElasticSearchAutoScalingLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v -s ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    " -r ElasticSearchAutoScalingLaunchConfig",
                    " --configsets update",
                    " --region ", {
                      "Ref": "AWS::Region"
                    }, "\n",
                    "runas=root\n"
                  ]]
                }

              },
              "/var/sophos/modify_network_config": {
                "content": {
                  "Fn::Join": [ "", [
                    "export private_ip=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                    "export host_name=`wget -q -O - http://169.254.169.254/latest/meta-data/local-hostname`\n",
                    "export host_entry=\"$private_ip $host_name\"\n",
                    "echo $host_entry\n",
                    "echo > /etc/hosts\n",
                    "echo 127.0.0.1 $host_name localhost >> /etc/hosts\n",
                    "echo $host_entry >> /etc/hosts\n",
                    "echo >> /etc/dhcp/dhclient.conf\n",
                    "echo 'supersede domain-name \"", {
                      "Fn::FindInMap": [ "RegionConfigMap", {
                        "Ref": "AWS::Region"
                      }, "PrivateDns" ]
                    } , "\";' >> /etc/dhcp/dhclient.conf\n",
                    "echo >> /etc/resolv.conf\n",
                    "echo 'search ", {
                      "Fn::FindInMap": [ "RegionConfigMap", {
                        "Ref": "AWS::Region"
                      }, "PrivateDns" ]
                    } , "' >> /etc/resolv.conf\n"
                  ]]
                },
                "mode": "000500",
                "owner": "root"
              }
            },
            "commands": {
              "02_delete_run_list_nodes": {
                "command": "rm -f /var/chef/chef-repo/nodes/*.*"
              },
              "03_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ", [
                    "chef-client --no-color -z",
                    "-c /var/chef/chef-repo/.chef/client.rb",
                    "-j /var/sophos/cookbooks/attributes.json",
                    "-l debug -L /var/log/chef-client.instance.install.chef.log"
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "04_configure_node_run_list": {
                "command": {
                  "Fn::Join": ["", [
                    "knife node run_list add -z `knife node list -z` \"",
                    " recipe[sophos-cloud-mount::default],",
                    " recipe[sophos-cloud-mount::install],",
                    "recipe[sophos-cloud-elasticsearch::configure],",
                    "recipe[sophos-cloud-xgemail::configure_logging],",
                    "recipe[sophos-cloud-snmpd::configure],",
                    "recipe[sophos-cloud-ntpd]",
                    "\""
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "05_modify_network_config": {
                "command": "/var/sophos/modify_network_config"
              },
              "06_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ", [
                    "chef-client --no-color -z",
                    "-c /var/chef/chef-repo/.chef/client.rb",
                    "-j /var/sophos/cookbooks/attributes.json",
                    "-l debug -L /var/log/chef-client.instance.install.service.log"
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "08_delete_cfn_hub_config": {
                "command": "rm -f /etc/cfn/hooks.d/cfn-auto-reloader.conf.*"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },

          "update": {
            "commands": {
              "01_clear_node_run_list": {
                "command": {
                  "Fn::Join": ["", [
                    "knife node run_list remove -z `knife node list -z` \"",
                    "recipe[sophos-cloud-elasticsearch::configure],",
                    "recipe[sophos-cloud-ntpd]",
                    "\""
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "02_setup_node_run_list": {
                "command": {
                  "Fn::Join": ["", [
                    "knife node run_list add -z `knife node list -z` \"",
                    "recipe[sophos-cloud-elasticsearch::update],",
                    "recipe[sophos-cloud-ntpd]",
                    "\""
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              },
              "03_run_chef_client": {
                "command": {
                  "Fn::Join": [ " ", [
                    "chef-client --no-color -z",
                    "-c /var/chef/chef-repo/.chef/client.rb",
                    "-j /var/sophos/cookbooks/attributes.json",
                    "-l debug -L /var/log/chef-client.instance.update.log"
                  ]]
                },
                "cwd": "/var/chef/chef-repo",
                "env": {
                  "HOME": "/var/chef"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": {"Ref": "PublicIpAddressEnabled"},
              "DeviceIndex": "0",
              "Groups": {
                "Ref": "SecurityGroups"
              }
            }
          ],
          "ImageId": {
            "Ref": "AmiId"
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "Monitoring": {
            "Enabled": {
              "Fn::If": [
                "EnableDetailedMonitoring",
                "true",
                "false"
              ]
            }
          },
          "IamInstanceProfile": {
            "Name": { "Ref": "IamInstanceProfile" }
          },
          "InstanceMarketOptions": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "MarketType": "spot",
                "SpotOptions": {
                  "MaxPrice": {
                    "Ref": "SpotPrice"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "# Install the files and packages from the metadata\n",
                  "# Make sure we call cfn-signal before exiting, otherwise we have to\n",
                  "# wait for the CreationPolicy timeout to detect failed initialization.\n",
                  "# That's because of using the bash -e option, which makes the script\n",
                  "# exit immediately as soon as any command, e.g. cfn-init, fails.\n",
                  "onexit() {\n",
                  "  exit_code=$?\n",
                  "  /opt/aws/bin/cfn-signal -e $exit_code",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource ElasticSearchAutoScalingGroup",
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "}\n",
                  "trap onexit EXIT\n",
                  "while [ 1 -eq 1 ]; do\n",
                  "wget -q --tries=10 --timeout=2 http://www.google.com -O /tmp/index.site &> /dev/null\n",
                  "if [ ! -s /tmp/index.site ];then\n",
                  "   echo No connection to internet\n",
                  "else\n",
                  "   echo Connection to internet established\n",
                  "   break\n",
                  "fi\n",
                  "sleep 5\n",
                  "done\n",
                  "/opt/aws/bin/cfn-init --verbose ",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource ElasticSearchAutoScalingLaunchConfig ",
                  " --configsets configure ",
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# Now the onexit function will get called.\n"
                ]
              ]
            }
          }
        }
      }
    },

    "cfn": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": { "Ref" : "LogGroupRetentionPeriod" }
      }
    },

    "ElasticSearch": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": { "Ref" : "LogGroupRetentionPeriod" }
      }
    },

    "BootstrapProperties" : {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": { "Ref" : "LogGroupRetentionPeriod" }
      }
    }
  }
}
