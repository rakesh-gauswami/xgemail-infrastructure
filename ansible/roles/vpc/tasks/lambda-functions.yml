---
# EIP Monitor Lambda Function
- name: "Create a zip archive of eip monitor lambda function"
  archive:
    path:
    - /work/lambda/xgemail_eip_monitor.py
    - /work/lambda/requests
    - /work/lambda/idna
    - /work/lambda/urllib3
    - /work/lambda/certifi
    - /work/lambda/chardet
    dest: "{{tmp_artifacts_dir}}/xgemail_eip_monitor.zip"
    format: zip

- name: "Upload the eip monitor lambda function for {{stack.lambda.eip_monitor_lambda_function}} to the config bucket {{s3.lambda_bucket}}"
  s3:
    mode:               put
    region:             "{{account.region}}"
    bucket:             "{{s3.lambda_bucket}}"
    object:             "lambda/{{build.branch}}/{{build.number}}/xgemail_eip_monitor.zip"
    src:                "{{tmp_artifacts_dir}}/xgemail_eip_monitor.zip"
    overwrite:          always

- name: "Deploy EIP Monitor Lambda Function {{stack.lambda.eip_monitor_lambda_function}} to {{account.name}}-{{account.region}}"
  cloudformation:
    stack_name:                             "{{stack.lambda.eip_monitor_lambda_function}}"
    state:                                  present
    region:                                 "{{account.region}}"
    disable_rollback:                       true
    template:                               "{{template.lambda.lambda_xgemail_eip_monitor_template}}"
    template_parameters:
      Environment:                          "{{account.name}}"
      FunctionName:                         "{{lambda.eip_monitor_lambda_function}}"
      HandlerName:                          xgemail_eip_monitor.eip_monitor_handler
      IAMRoleArn:                           "{{iam_stack.stack_outputs.EipMonitorLambdaExecutionRoleArn}}"
      S3Bucket:                             "{{s3.lambda_bucket}}"
      S3Key:                                "lambda/{{build.branch}}/{{build.number}}/xgemail_eip_monitor.zip"
      ScheduleExpression:                   rate(60 minutes)
  register: eip_monitor_stack

- debug:
    var: eip_monitor_stack
    verbosity: 3

- name: "Display EIP Monitor Lambda Function Stack Output"
  debug:
    msg: "{{eip_monitor_stack.stack_outputs}}"
    verbosity: 2

# EIP Rotation Lambda Function
- name: "Create a zip archive of eip rotation lambda function"
  archive:
    path: /work/lambda/xgemail_eip_rotation.py
    dest: "{{tmp_artifacts_dir}}/xgemail_eip_rotation.zip"
    format: zip

- name: "Upload the eip rotation lambda function for {{stack.lambda.eip_rotation_lambda_function}} to the config bucket {{s3.lambda_bucket}}"
  s3:
    mode:               put
    region:             "{{account.region}}"
    bucket:             "{{s3.lambda_bucket}}"
    object:             "lambda/{{build.branch}}/{{build.number}}/xgemail_eip_rotation.zip"
    src:                "{{tmp_artifacts_dir}}/xgemail_eip_rotation.zip"
    overwrite:          always

- name: "Deploy EIP Rotation Lambda Function {{stack.lambda.eip_rotation_lambda_function}} to {{account.name}}-{{account.region}}"
  cloudformation:
    stack_name:                             "{{stack.lambda.eip_rotation_lambda_function}}"
    state:                                  present
    region:                                 "{{account.region}}"
    disable_rollback:                       true
    template:                               "{{template.lambda.lambda_xgemail_eip_rotation_template}}"
    template_parameters:
      Environment:                          "{{account.name}}"
      FunctionName:                         "{{lambda.eip_rotation_lambda_function}}"
      HandlerName:                          xgemail_eip_rotation.eip_rotation_handler
      IAMRoleArn:                           "{{iam_stack.stack_outputs.EipRotationLambdaExecutionRoleArn}}"
      S3Bucket:                             "{{s3.lambda_bucket}}"
      S3Key:                                "lambda/{{build.branch}}/{{build.number}}/xgemail_eip_rotation.zip"
      ScheduleExpression:                   rate(45 minutes)
      SsmPostfixService:                    "{{ssm_stack.stack_outputs.PostfixService}}"
      SsmUpdateHostname:                    "{{ssm_stack.stack_outputs.UpdateHostname}}"
  register: eip_rotation_stack

- debug:
    var: eip_rotation_stack
    verbosity: 3

- name: "Display EIP Rotation Lambda Function Stack Output"
  debug:
    msg: "{{eip_rotation_stack.stack_outputs}}"
    verbosity: 2

# Multi EIP Rotation Lambda Function
- name: "Create a zip archive of multi eip rotation lambda function"
  archive:
    path: /work/lambda/xgemail_multi_eip_rotation.py
    dest: "{{tmp_artifacts_dir}}/xgemail_multi_eip_rotation.zip"
    format: zip

- name: "Upload the multi eip rotation lambda function for {{stack.lambda.multi_eip_rotation_lambda_function}} to the config bucket {{s3.lambda_bucket}}"
  s3:
    mode:               put
    region:             "{{account.region}}"
    bucket:             "{{s3.lambda_bucket}}"
    object:             "lambda/{{build.branch}}/{{build.number}}/xgemail_multi_eip_rotation.zip"
    src:                "{{tmp_artifacts_dir}}/xgemail_multi_eip_rotation.zip"
    overwrite:          always

- name: "Deploy Multi EIP Rotation Lambda Function {{stack.lambda.multi_eip_rotation_lambda_function}} to {{account.name}}-{{account.region}}"
  cloudformation:
    stack_name:                             "{{stack.lambda.multi_eip_rotation_lambda_function}}"
    state:                                  present
    region:                                 "{{account.region}}"
    disable_rollback:                       true
    template:                               "{{template.lambda.lambda_xgemail_multi_eip_rotation_template}}"
    template_parameters:
      FunctionName:                         "{{lambda.multi_eip_rotation_lambda_function}}"
      HandlerName:                          xgemail_multi_eip_rotation.multi_eip_rotation_handler
      IAMRoleArn:                           "{{iam_stack.stack_outputs.MultiEipRotationLambdaExecutionRoleArn}}"
      S3Bucket:                             "{{s3.lambda_bucket}}"
      S3Key:                                "lambda/{{build.branch}}/{{build.number}}/xgemail_multi_eip_rotation.zip"
      ScheduleExpression:                   rate(45 minutes)
      SsmPostfixService:                    "{{ssm_stack.stack_outputs.PostfixService}}"
      ScheduleState:                        DISABLED
  register: multi_eip_rotation_stack

- debug:
    var: multi_eip_rotation_stack
    verbosity: 3

- name: "Display Multi EIP Rotation Lambda Function Stack Output"
  debug:
    msg: "{{multi_eip_rotation_stack.stack_outputs}}"
    verbosity: 2

# MailFlow Submit ELB Security Group Sync Office365 IP Lambda Function
- name: "Create a zip archive of MF O365 IP sync lambda function"
  archive:
    path:
    - /work/lambda/xgemail_mf_elb_o365_ip_sync.py

    dest: "{{tmp_artifacts_dir}}/xgemail_mf_elb_o365_ip_sync.zip"
    format: zip

- name: "Upload the MF O365 IP sync lambda function for {{stack.lambda.mf_elb_o365_ip_sync_lambda_function}} to the config bucket {{s3.lambda_bucket}}"
  s3:
    mode:               put
    region:             "{{account.region}}"
    bucket:             "{{s3.lambda_bucket}}"
    object:             "lambda/{{build.branch}}/{{build.number}}/xgemail_mf_elb_o365_ip_sync.zip"
    src:                "{{tmp_artifacts_dir}}/xgemail_mf_elb_o365_ip_sync.zip"
    overwrite:          always

- name: "Deploy MF ELB Office365 IP Sync Lambda Function {{stack.lambda.mf_elb_o365_ip_sync_lambda_function}} to {{account.name}}-{{account.region}}"
  cloudformation:
    stack_name:                             "{{stack.lambda.mf_elb_o365_ip_sync_lambda_function}}"
    state:                                  present
    region:                                 "{{account.region}}"
    disable_rollback:                       true
    template:                               "{{template.lambda.lambda_xgemail_mf_elb_o365_ip_sync_template}}"
    template_parameters:
      Environment:                          "{{account.name}}"
      FunctionName:                         "{{lambda.mf_elb_o365_ip_sync_lambda_function}}"
      HandlerName:                          xgemail_mf_elb_o365_ip_sync.mf_elb_o365_ip_sync_handler
      IAMRoleArn:                           "{{iam_stack.stack_outputs.MfElbO365IpSyncLambdaExecutionRoleArn}}"
      MfIsElbSecurityGroup:                 "{{sg_stack.stack_outputs.XgemailMfInboundSubmitSecurityGroupLb}}"
      MfOsElbSecurityGroup:                 "{{sg_stack.stack_outputs.XgemailMfOutboundSubmitSecurityGroupLb}}"
      S3Bucket:                             "{{s3.lambda_bucket}}"
      S3Key:                                "lambda/{{build.branch}}/{{build.number}}/xgemail_mf_elb_o365_ip_sync.zip"
      ScheduleExpression:                   cron(0 10 * * ? *)
      ScheduleState:                        "ENABLED"
  register: mf_elb_o365_ip_sync_stack

- debug:
    var: mf_elb_o365_ip_sync_stack
    verbosity: 3

- name: "Display MF ELB O365 IP Sync Lambda Function Stack Output"
  debug:
    msg: "{{mf_elb_o365_ip_sync_stack.stack_outputs}}"
    verbosity: 2

# Extract Message Lambda Function
- name: "Create a zip archive of extract message lambda function"
  #when: account.name == 'prod' and account.region == 'eu-central-1'
  archive:
    path: /work/lambda/xgemail_extract_message.py
    dest: "{{tmp_artifacts_dir}}/xgemail_extract_message.zip"
    format: zip

- name: "Upload the extract message lambda function for {{stack.lambda.extract_message_lambda_function}} to the config bucket {{s3.lambda_bucket}}"
  #when: account.name == 'prod' and account.region == 'eu-central-1'
  s3:
    mode:               put
    region:             "{{account.region}}"
    bucket:             "{{s3.lambda_bucket}}"
    object:             "lambda/{{build.branch}}/{{build.number}}/xgemail_extract_message.zip"
    src:                "{{tmp_artifacts_dir}}/xgemail_extract_message.zip"
    overwrite:          always

- name: "Deploy Extract Message Lambda Function {{stack.lambda.extract_message_lambda_function}} to {{account.name}}-{{account.region}}"
  #when: account.name == 'prod' and account.region == 'eu-central-1'
  cloudformation:
    stack_name:                             "{{stack.lambda.extract_message_lambda_function}}"
    state:                                  present
    region:                                 "{{account.region}}"
    disable_rollback:                       true
    template:                               "{{template.lambda.lambda_xgemail_extract_message_template}}"
    template_parameters:
      FunctionName:                         "{{lambda.extract_message_lambda_function}}"
      HandlerName:                          xgemail_extract_message.extract_message_handler
      S3Bucket:                             "{{s3.lambda_bucket}}"
      S3Key:                                "lambda/{{build.branch}}/{{build.number}}/xgemail_extract_message.zip"
  register: extract_message_stack

- debug:
  #when: account.name == 'prod' and account.region == 'eu-central-1'
    var: extract_message_stack
    verbosity: 3

- name: "Display Extract Message Lambda Function Stack Output"
  #when: account.name == 'prod' and account.region == 'eu-central-1'
  debug:
    msg: "{{extract_message_stack.stack_outputs}}"
    verbosity: 2
