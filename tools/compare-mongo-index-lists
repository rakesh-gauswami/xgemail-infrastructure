#!/usr/bin/env python
# vim: autoindent expandtab tabstop=4 softtabstop=4 shiftwidth=4 filetype=python

# Copyright 2017, Sophos Limited. All rights reserved.
#
# 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of
# Sophos Limited and Sophos Group.  All other product and company
# names mentioned are trademarks or registered trademarks of their
# respective owners.

import optparse
import re


def parse_command_line():
    parser = optparse.OptionParser(
            usage="%prog [options] PATH1 PATH2",
            description="Compare output of two files generated by the mongo-list-indexes command.")

    parser.add_option(
            "-i", "--ignore", metavar="ATTRIBUTE", action="append", default=[],
            help="ignore the given attribute, e.g. background or sparse, when comparing indexes;"
                " repeat this option to ignore multiple attributes")

    options, paths = parser.parse_args()

    if len(paths) < 2:
        parser.error("missing one or more PATH arguments")

    if len(paths) > 2:
        parser.error("too many arguments")

    return options, paths[0], paths[1]


def get_index_dict(options, path):
    result = dict()
    with open(path) as fp:
        for line in fp.readlines():
            k, v = line.strip().split(None, 1)
            if len(options.ignore) > 0:
                keep_assignments = []
                orig_assignments = re.sub(r"[(),]*", "", v).split()
                for assignment in orig_assignments:
                    attr = assignment.split("=", 1)[0]
                    if attr not in options.ignore:
                        keep_assignments.append(assignment)
                v = "(" + ", ".join(keep_assignments) + ")"
            result[k] = v
    return result


def compare_index_dicts(options, path_1, index_dict_1, path_2, index_dict_2):
    print "Comparing indexes listed in %r and %r:" % (path_1, path_2)

    index_keys_1 = set(index_dict_1.keys())
    index_keys_2 = set(index_dict_2.keys())

    index_keys_only_in_1 = index_keys_1 - index_keys_2
    if len(index_keys_only_in_1) > 0:
        print
        print "Indexes unique to %r:" % path_1
        for k in sorted(list(index_keys_only_in_1)):
            print "-", k, index_dict_1[k]

    index_keys_only_in_2 = index_keys_2 - index_keys_1
    if len(index_keys_only_in_2) > 0:
        print
        print "Indexes unique to %r:" % path_2
        for k in sorted(list(index_keys_only_in_2)):
            print "-", k, index_dict_2[k]

    index_keys_with_different_attributes = set()
    index_keys_with_identical_attributes = set()
    index_keys_in_both = index_keys_1 & index_keys_2
    for k in index_keys_in_both:
        if index_dict_1[k] != index_dict_2[k]:
            index_keys_with_different_attributes.add(k)
        else:
            index_keys_with_identical_attributes.add(k)
    if len(index_keys_with_different_attributes) > 0:
        print
        print "Indexes common to %r and %r with different attributes:" % (path_1, path_2)
        for k in sorted(list(index_keys_with_different_attributes)):
            print "-", k, index_dict_1[k], "!=", index_dict_2[k]

    print
    print "Summary:"
    print "%7d indexes in %r" % (len(index_dict_1), path_1)
    print "%7d indexes in %r" % (len(index_dict_2), path_2)
    print "%7d indexes only in %r" % (len(index_keys_only_in_1), path_1)
    print "%7d indexes only in %r" % (len(index_keys_only_in_2), path_2)
    print "%7d indexes common to %r and %r with different attribute sets" % (len(index_keys_with_different_attributes), path_1, path_2)
    print "%7d indexes common to %r and %r with identical attribute sets" % (len(index_keys_with_identical_attributes), path_1, path_2)
    if len(options.ignore) > 0:
        print "  Note, ignoring these attributes:", ", ".join(options.ignore)


def main():
    options, path_1, path_2 = parse_command_line()

    index_dict_1 = get_index_dict(options, path_1)
    index_dict_2 = get_index_dict(options, path_2)
    compare_index_dicts(options, path_1, index_dict_1, path_2, index_dict_2)


if __name__ == "__main__":
    main()
