#!/usr/bin/env python3
# vim: autoindent expandtab shiftwidth=4 filetype=python

"""
Create Jenkins files for all PoP account/pipeline combinations.

Example:
    %(prog)s cicd/pipelines
"""

import argparse
import os
import signal

import supported_environment

CRON = True
NO_CRON = False

STATION_TYPE = 'email'

EMAIL_VPC_NAME   = 'CloudEmail'

PIPELINES = [
    # pipeline_name, pipeline_function
    #('full',        CRON),
    ('vpc',                             NO_CRON),
    ('internet-submit',                 NO_CRON),
    ('customer-delivery',               NO_CRON),
    ('customer-xdelivery',              NO_CRON),
    ('customer-submit',                 NO_CRON),
    ('internet-delivery',               NO_CRON),
    ('internet-xdelivery',              NO_CRON),
    ('risky-delivery',                  NO_CRON),
    ('risky-xdelivery',                 NO_CRON),
    ('delta-delivery',                  NO_CRON),
    ('delta-xdelivery',                 NO_CRON),
    ('warmup-delivery',                 NO_CRON),
    ('warmup-xdelivery',                NO_CRON),
    ('encryption-submit',               NO_CRON),
    ('encryption-delivery',             NO_CRON),
    ('mf-inbound-submit',               NO_CRON),
    ('mf-inbound-delivery',             NO_CRON),
    ('mf-inbound-xdelivery',            NO_CRON),
    ('mf-outbound-submit',              NO_CRON),
    ('mf-outbound-delivery',            NO_CRON),
    ('mf-outbound-xdelivery',           NO_CRON),
    ('xdelivery-instances-cycle',       NO_CRON)
]

ANSIBLE_CI_PIPELINES = [
    'xgemail-infra-ci'
]

CRON_MINUTE_OFFSETS = {
    # 'inf' : 'H(15-24)',
    # 'dev' : 'H(0-9)',
    'inf': '',
    'dev': '',
    #'perf': '',
    'prod': '',
    'qa': ''
    # 'qa'  : 'H(0-9)'
}

CRON_SPEC_FORMAT = '{} 3,8,12,16,20 * * 0-5'

JENKINSFILE_FORMAT = """
// vim: autoindent expandtab shiftwidth=4 filetype=groovy
// This file was originally generated by bamboo/create-legacy-jenkins-files.py

@Library('msg/msg-jenkins')
@Library('devops/sophos-jenkins-shared-library')
_

legacyCommonDeploymentPipeline {{
    popAccount = com.sophos.central.jenkins.lib.PopAccount.{account_name}
    deploymentRegion = com.sophos.central.jenkins.lib.PopRegion.{region_enum}
    cronExpression = '{cron_expression}'
    vpcName = '{vpc_name}'
    pipelineName = '{pipeline_type}'
}}
""".strip()

# ANSIBLE_CI_JENKINSFILE_FORMAT = """
# // vim: autoindent expandtab shiftwidth=4 filetype=groovy
# // This file was originally generated by bamboo/create-pop-jenkins-files.py
#
# @Library('MSG/msg-jenkins')
# @Library('devops/sophos-jenkins-shared-library')
# _
#
# executeLegacyAnsibleCIPipeline {{
#     popAccount = com.sophos.central.jenkins.lib.PopAccount.{account_name}
# }}
# """.strip()


class Application:
    def __init__(
        self,
        should_force_creation
    ):
        self.skipped = 0
        self.created = 0
        self.should_force_creation = should_force_creation


    def createJenkinsfiles(
        self,
        root_dir,
        account,
        vpc_type,
        region
    ):
        vpc_name = EMAIL_VPC_NAME

        pipeline_name = '{}-{}'.format(vpc_type, region)
        region_enum = region.upper().replace('-', '_')

        for pipeline_type, is_on_cron in PIPELINES:

            path = os.path.join(
                root_dir,
                pipeline_type,
                pipeline_name,
                'Jenkinsfile'
            )

            cron_expression = ''

            if is_on_cron:
                minute_offset = CRON_MINUTE_OFFSETS[account.deployment_environment]

                if minute_offset:
                    cron_expression = CRON_SPEC_FORMAT.format(minute_offset)

            if not self.should_force_creation and os.path.exists(path):
                print('skipping', path, '(it already exists)')
                self.skipped += 1
                continue

            print('creating', path, '...')
            os.makedirs(os.path.dirname(path), exist_ok=True)
            with open(path, 'w') as f:
                print(JENKINSFILE_FORMAT.format(
                    account_name            = account.pop_name,
                    cron_expression         = cron_expression,
                    region_enum             = region_enum,
                    vpc_name                = vpc_name,
                    pipeline_type           = pipeline_type
                ), file=f)
            self.created += 1

    def createNoneDeploymentJenkinsFile(
            self,
            root_dir,
            pop_account,
            job_list,
            file_format
    ):

        for pipeline_type in job_list:
            path = os.path.join(
                root_dir,
                pipeline_type,
                'Jenkinsfile'
            )

            print('creating', path, '...')
            os.makedirs(os.path.dirname(path), exist_ok=True)
            with open(path, 'w') as f:
                print(file_format.format(
                    account_name           = pop_account
                ), file=f)



def main():
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    args = parse_command_line()
    process(args)

def parse_command_line():
    doclines = __doc__.strip().splitlines()
    description = doclines[0]
    epilog = ("\n".join(doclines[1:])).strip()

    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument(
        '-f', '--force',
        action='store_true',
        help='forcibly recreate ALL Jenkins files, even if they already exist')

    parser.add_argument(
        'dir',
        help='create Jenkins files under this directory.')

    return parser.parse_args()

def process(args):

    application = Application(args.force)

    print('creating files relative to', os.path.abspath(args.dir))
    print()

    account_names = supported_environment.SUPPORTED_ENVIRONMENT.get_legacy_account_names()

    for account_name in account_names:
        account = supported_environment.SUPPORTED_ENVIRONMENT.get_legacy_account(account_name)

        if not account.pop_name:
            continue

        print('processing legacy account <', account.name, '>')

        deployment_environment = account.get_deployment_environment()
        root_dir = os.path.join(
            args.dir,
            'legacy',
            deployment_environment
        )

        #application.createJenkinsfiles(root_dir, account, HUB_TYPE, account.hub_region)

        for station_region in account.get_station_regions():
            application.createJenkinsfiles(root_dir, account, STATION_TYPE, station_region)

        #application.createNoneDeploymentJenkinsFile(root_dir, account.pop_name, ANSIBLE_CI_PIPELINES, ANSIBLE_CI_JENKINSFILE_FORMAT)

        #if deployment_environment != 'prod':
        #    application.createNoneDeploymentJenkinsFile(root_dir, account.pop_name, MASTER_BUILDER_PIPELINES, MASTER_BUILDER_JENKINSFILE_FORMAT)
        #    application.createNoneDeploymentJenkinsFile(root_dir, account.pop_name, TRIGGER_SPINNAKER_PIPELINES, TRIGGER_SPINNAKER_JENKINSFILE_FORMAT)


    print()
    print('skipped', application.skipped, 'file(s)')
    print('created', application.created, 'file(s)')

if __name__ == '__main__':
    main()
