#!/usr/bin/python
# vim: autoindent expandtab tabstop=4 softtabstop=4 shiftwidth=4 filetype=python

# Copyright 2016, Sophos Limited. All rights reserved.
#
# 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of
# Sophos Limited and Sophos Group.  All other product and company
# names mentioned are trademarks or registered trademarks of their
# respective owners.

"""
Set environment variables and run command on Bamboo.

Set PYTHONPATH so python scripts can import common modules regardless of
where they are located in the file system or where they are called from.

Set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN if
the corresponding variables generated by the AWS Credentials Variables
task are set.

After setting environment variables execute the command specified on
the command line, exiting with whatever exit code it exits with.
"""

import optparse
import os
import subprocess
import sys


# List of entries to add to PYTHONPATH.
# This may be modified before being used by get_environment_updates.
PYTHONPATH_ENTRIES_TO_ADD = [
    # Common python code shared between Bamboo and EC2 instances.
    "cookbooks/sophos-central-python/files/default/common",
    "cookbooks/sophos-central-border-patrol/files/borderpatrol",

    # Bamboo-specific code.
    "bamboo",
]


def parse_command_line():
    parser = optparse.OptionParser(usage="%prog [options] COMMAND [ARGUMENT(s)...]")

    # Disable mixing of options and arguments, so we can distinguish
    # options to this program from options to the command it wraps.
    parser.allow_interspersed_args = False

    parser.add_option(
            "-p", "--python-cookbook-package",
            metavar="NAME", action="append", default=[],
            help="Add the named python package in the sophos-central-python cookbook")

    options, args = parser.parse_args()

    if len(args) == 0:
        parser.error("missing required COMMAND argument")

    return options, args


def get_environment_updates():
    """
    Return the environment dict updates to use for wrapped Bamboo commands.
    """

    updates = {}

    # Export PYTHONPATH.
    # Append to existing PYTHONPATH, if any.
    # Assume we will always be called from within a git repository.

    new_pythonpath_entries = []

    old_pythonpath = os.environ.get("PYTHONPATH")
    if old_pythonpath is not None:
        for entry in old_pythonpath.split(":"):
            new_pythonpath_entries.append(entry)

    repo_path = subprocess.check_output("git rev-parse --show-toplevel".split()).strip()

    for relative_entry in PYTHONPATH_ENTRIES_TO_ADD:
        absolute_entry = os.path.join(repo_path, relative_entry)
        new_pythonpath_entries.append(absolute_entry)

    updates["PYTHONPATH"] = ":".join(new_pythonpath_entries)

    # Export variables set by AWS Credentials Variables task so they can
    # be used by AWS clients.

    updates["AWS_ACCESS_KEY_ID"] = os.environ.get("bamboo_custom_aws_accessKeyId")
    updates["AWS_SECRET_ACCESS_KEY"] = os.environ.get("bamboo_custom_aws_secretAccessKey_password")
    updates["AWS_SESSION_TOKEN"] = os.environ.get("bamboo_custom_aws_sessionToken_password")

    return { k: v for k, v in updates.items() if v is not None }

def _main():
    options, argv = parse_command_line()

    for python_package in options.python_cookbook_package:
        path = os.path.join("cookbooks/sophos-central-python/files/default", python_package)
        PYTHONPATH_ENTRIES_TO_ADD.append(path)

    os.environ.update(get_environment_updates())

    sys.exit(subprocess.call(argv))

if __name__ == "__main__":
    _main()
